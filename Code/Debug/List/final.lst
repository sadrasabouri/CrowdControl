
AVRASM ver. 2.1.30  E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm Fri Feb 05 13:58:46 2021

E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1094): warning: Register r10 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1095): warning: Register r11 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1096): warning: Register r12 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _second=R4
                 	.DEF _second_msb=R5
                 	.DEF _minute=R6
                 	.DEF _minute_msb=R7
                 	.DEF _hour=R8
                 	.DEF _hour_msb=R9
                 	.DEF _totalcount1_5=R10
                 	.DEF _totalcount1_5_msb=R11
                 	.DEF _nobat1_5=R12
                 	.DEF _nobat1_5_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0072 	JMP  __RESET
000002 940c 00cb 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 009f 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 001e
000034 0007      	.DB  0x1E,0x0,0x7,0x0
                 
                 _0x0:
000035 2020
000036 2520
000037 3230
000038 3a64      	.DB  0x20,0x20,0x20,0x25,0x30,0x32,0x64,0x3A
000039 3025
00003a 6432
00003b 253a
00003c 3230      	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
00003d 2064
00003e 5020
00003f 004d
000040 2020      	.DB  0x64,0x20,0x20,0x50,0x4D,0x0,0x20,0x20
000041 2520
000042 3230
000043 3a64
000044 3025      	.DB  0x20,0x25,0x30,0x32,0x64,0x3A,0x25,0x30
000045 6432
000046 253a
000047 3230
000048 2064      	.DB  0x32,0x64,0x3A,0x25,0x30,0x32,0x64,0x20
000049 4120
00004a 004d
00004b 6f67
00004c 7420      	.DB  0x20,0x41,0x4D,0x0,0x67,0x6F,0x20,0x74
00004d 206f
00004e 6162
00004f 6a64
000050 2065      	.DB  0x6F,0x20,0x62,0x61,0x64,0x6A,0x65,0x20
000051 203a
000052 2000
000053 616e
000054 6166      	.DB  0x3A,0x20,0x0,0x20,0x6E,0x61,0x66,0x61
000055 2072
000056 6f6a
000057 6f6c
000058 6579      	.DB  0x72,0x20,0x6A,0x6F,0x6C,0x6F,0x79,0x65
000059 7320
00005a 6f68
00005b 616d
00005c 6820      	.DB  0x20,0x73,0x68,0x6F,0x6D,0x61,0x20,0x68
00005d 7361
00005e 6174
00005f 646e
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1149): warning: .cseg .db misalignment - padding zero byte
000060 0000      	.DB  0x61,0x73,0x74,0x61,0x6E,0x64,0x0
                 _0x2040060:
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1151): warning: .cseg .db misalignment - padding zero byte
000061 0001      	.DB  0x1
                 _0x2040000:
000062 4e2d
000063 4e41
000064 4900
000065 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1154): warning: .cseg .db misalignment - padding zero byte
000066 0000      	.DB  0x0
                 _0x2060003:
000067 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000068 0004      	.DW  0x04
000069 0006      	.DW  0x06
00006a 0066      	.DW  __REG_VARS*2
                 
00006b 0001      	.DW  0x01
00006c 02c4      	.DW  __seed_G102
00006d 00c2      	.DW  _0x2040060*2
                 
00006e 0002      	.DW  0x02
00006f 02c8      	.DW  __base_y_G103
000070 00ce      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
000071 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000072 94f8      	CLI
000073 27ee      	CLR  R30
000074 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000075 e0f1      	LDI  R31,1
000076 bffb      	OUT  GICR,R31
000077 bfeb      	OUT  GICR,R30
000078 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000079 e08d      	LDI  R24,(14-2)+1
00007a e0a2      	LDI  R26,2
00007b 27bb      	CLR  R27
                 __CLEAR_REG:
00007c 93ed      	ST   X+,R30
00007d 958a      	DEC  R24
00007e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000080 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000081 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000082 93ed      	ST   X+,R30
000083 9701      	SBIW R24,1
000084 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000085 ede0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000086 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000087 9185      	LPM  R24,Z+
000088 9195      	LPM  R25,Z+
000089 9700      	SBIW R24,0
00008a f061      	BREQ __GLOBAL_INI_END
00008b 91a5      	LPM  R26,Z+
00008c 91b5      	LPM  R27,Z+
00008d 9005      	LPM  R0,Z+
00008e 9015      	LPM  R1,Z+
00008f 01bf      	MOVW R22,R30
000090 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000091 9005      	LPM  R0,Z+
000092 920d      	ST   X+,R0
000093 9701      	SBIW R24,1
000094 f7e1      	BRNE __GLOBAL_INI_LOOP
000095 01fb      	MOVW R30,R22
000096 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000097 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000098 bfed      	OUT  SPL,R30
000099 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00009b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00009c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00009d 940c 02b4 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;#include <mega32.h>
                 ;
                 ;int second;
                 ;int minute = 30;
                 ;int hour = 7;
                 ;
                 ;int totalcount1_5, nobat1_5;
                 ;int totalcount6, nobat6;
                 ;int totalcount7, nobat7;
                 ;int TotalCount;
                 ;
                 ;int badje1, badje2, badje3, badje4, badje5, badje6, badje7;
                 ;int namayesh = 0;
                 ;
                 ;void time_after(int, int*, int*, int*);
                 ;void LCD_namayesh_go_to_badje (int a, int b);
                 ;char GetKey();
                 ;
                 ;int d1,d2,d3 ,d4,d5,d6 ,d7;
                 ;int entezar;
                 ;void LCD_namayesh_go_to_badje (int a, int b);
                 ;void LCD_namayesh_entezar (int a);
                 ;
                 ;char str2[10];
                 ;char str3[17];
                 ;int reset = 0;
                 ;int saat_yekonim;
                 ;char str1[10];
                 ;int namayesh;
                 ;char lcd_buffer[17];
                 ;
                 ;// Timer Interrupt
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0028 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
00009f 93ea      	ST   -Y,R30
0000a0 93fa      	ST   -Y,R31
0000a1 b7ef      	IN   R30,SREG
0000a2 93ea      	ST   -Y,R30
                 ; 0000 0029     // Reinitialize Timer1 value
                 ; 0000 002A     TCNT1H = 0x85EE >> 8;
0000a3 e8e5      	LDI  R30,LOW(133)
0000a4 bded      	OUT  0x2D,R30
                 ; 0000 002B     TCNT1L = 0x85EE & 0xff;
0000a5 eeee      	LDI  R30,LOW(238)
0000a6 bdec      	OUT  0x2C,R30
                 ; 0000 002C 
                 ; 0000 002D     if(second==59){
0000a7 e3eb      	LDI  R30,LOW(59)
0000a8 e0f0      	LDI  R31,HIGH(59)
0000a9 15e4      	CP   R30,R4
0000aa 05f5      	CPC  R31,R5
0000ab f4b9      	BRNE _0x3
                 ; 0000 002E         second=0;
0000ac 2444      	CLR  R4
0000ad 2455      	CLR  R5
                 ; 0000 002F         if(minute==59){
0000ae 15e6      	CP   R30,R6
0000af 05f7      	CPC  R31,R7
0000b0 f471      	BRNE _0x4
                 ; 0000 0030             minute=0;
0000b1 2466      	CLR  R6
0000b2 2477      	CLR  R7
                 ; 0000 0031             if(hour==23)
0000b3 e1e7      	LDI  R30,LOW(23)
0000b4 e0f0      	LDI  R31,HIGH(23)
0000b5 15e8      	CP   R30,R8
0000b6 05f9      	CPC  R31,R9
0000b7 f419      	BRNE _0x5
                 ; 0000 0032                 hour=0;
0000b8 2488      	CLR  R8
0000b9 2499      	CLR  R9
                 ; 0000 0033             else
0000ba c003      	RJMP _0x6
                 _0x5:
                 ; 0000 0034                 hour++;
0000bb 01f4      	MOVW R30,R8
0000bc 9631      	ADIW R30,1
0000bd 014f      	MOVW R8,R30
                 ; 0000 0035         }
                 _0x6:
                 ; 0000 0036         else
0000be c003      	RJMP _0x7
                 _0x4:
                 ; 0000 0037             minute++;
0000bf 01f3      	MOVW R30,R6
0000c0 9631      	ADIW R30,1
0000c1 013f      	MOVW R6,R30
                 ; 0000 0038     }
                 _0x7:
                 ; 0000 0039     else
0000c2 c003      	RJMP _0x8
                 _0x3:
                 ; 0000 003A         second++;
0000c3 01f2      	MOVW R30,R4
0000c4 9631      	ADIW R30,1
0000c5 012f      	MOVW R4,R30
                 ; 0000 003B }
                 _0x8:
0000c6 91e9      	LD   R30,Y+
0000c7 bfef      	OUT  SREG,R30
0000c8 91f9      	LD   R31,Y+
0000c9 91e9      	LD   R30,Y+
0000ca 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 0
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 003F {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000cb 920a      	ST   -Y,R0
0000cc 921a      	ST   -Y,R1
0000cd 92fa      	ST   -Y,R15
0000ce 936a      	ST   -Y,R22
0000cf 937a      	ST   -Y,R23
0000d0 938a      	ST   -Y,R24
0000d1 939a      	ST   -Y,R25
0000d2 93aa      	ST   -Y,R26
0000d3 93ba      	ST   -Y,R27
0000d4 93ea      	ST   -Y,R30
0000d5 93fa      	ST   -Y,R31
0000d6 b7ef      	IN   R30,SREG
0000d7 93ea      	ST   -Y,R30
                 ; 0000 0040 char k;
                 ; 0000 0041 k = GetKey();
0000d8 931a      	ST   -Y,R17
                 ;	k -> R17
0000d9 d2ea      	RCALL _GetKey
0000da 2f1e      	MOV  R17,R30
                 ; 0000 0042 GICR |= (1 << INTF0);
0000db b7eb      	IN   R30,0x3B
0000dc 64e0      	ORI  R30,0x40
0000dd bfeb      	OUT  0x3B,R30
                 ; 0000 0043 if(!reset){
0000de 91e0 02a5 	LDS  R30,_reset
0000e0 91f0 02a6 	LDS  R31,_reset+1
0000e2 9730      	SBIW R30,0
0000e3 f009      	BREQ PC+2
0000e4 c1af      	RJMP _0x9
                 ; 0000 0044         if(k != 0xFF) // dokme feshorde shod
0000e5 3f1f      	CPI  R17,255
0000e6 f409      	BRNE PC+2
0000e7 c1ab      	RJMP _0xA
                 ; 0000 0045       {
                 ; 0000 0046         if (hour < 13 || (hour ==13 && minute<=30 )){
0000e8 e0ed      	LDI  R30,LOW(13)
0000e9 e0f0      	LDI  R31,HIGH(13)
0000ea 168e      	CP   R8,R30
0000eb 069f      	CPC  R9,R31
0000ec f04c      	BRLT _0xC
0000ed 15e8      	CP   R30,R8
0000ee 05f9      	CPC  R31,R9
0000ef f429      	BRNE _0xD
0000f0 e1ee      	LDI  R30,LOW(30)
0000f1 e0f0      	LDI  R31,HIGH(30)
0000f2 15e6      	CP   R30,R6
0000f3 05f7      	CPC  R31,R7
0000f4 f40c      	BRGE _0xC
                 _0xD:
0000f5 c007      	RJMP _0xB
                 _0xC:
                 ; 0000 0047             saat_yekonim = 1;
0000f6 e0e1      	LDI  R30,LOW(1)
0000f7 e0f0      	LDI  R31,HIGH(1)
0000f8 93e0 02a7 	STS  _saat_yekonim,R30
0000fa 93f0 02a8 	STS  _saat_yekonim+1,R31
                 ; 0000 0048         }else{
0000fc c005      	RJMP _0x10
                 _0xB:
                 ; 0000 0049             saat_yekonim = 0 ;
0000fd e0e0      	LDI  R30,LOW(0)
0000fe 93e0 02a7 	STS  _saat_yekonim,R30
000100 93e0 02a8 	STS  _saat_yekonim+1,R30
                 ; 0000 004A         }
                 _0x10:
                 ; 0000 004B       switch(k)
000102 2fe1      	MOV  R30,R17
000103 e0f0      	LDI  R31,0
                 ; 0000 004C         {
                 ; 0000 004D         case 1 :
000104 30e1      	CPI  R30,LOW(0x1)
000105 e0a0      	LDI  R26,HIGH(0x1)
000106 07fa      	CPC  R31,R26
000107 f009      	BREQ PC+2
000108 c061      	RJMP _0x14
                 ; 0000 004E             if (saat_yekonim) {
000109 940e 06b1 	CALL SUBOPT_0x0
00010b f409      	BRNE PC+2
00010c c05c      	RJMP _0x15
                 ; 0000 004F                 TotalCount += 1;
00010d 940e 06b7 	CALL SUBOPT_0x1
                 ; 0000 0050                 totalcount1_5 += 1;
00010f 01f5      	MOVW R30,R10
000110 9631      	ADIW R30,1
000111 015f      	MOVW R10,R30
                 ; 0000 0051                 if(badje1 == 0){
000112 91e0 026a 	LDS  R30,_badje1
000114 91f0 026b 	LDS  R31,_badje1+1
000116 9730      	SBIW R30,0
000117 f441      	BRNE _0x16
                 ; 0000 0052                     badje1 = 1;
000118 940e 06c1 	CALL SUBOPT_0x2
                 ; 0000 0053                     nobat1_5 += 1;
                 ; 0000 0054                     namayesh = 1;
00011a 940e 06cb 	CALL SUBOPT_0x3
                 ; 0000 0055                     LCD_namayesh_go_to_badje(nobat1_5, 1);
00011c e0a1      	LDI  R26,LOW(1)
00011d e0b0      	LDI  R27,0
00011e d254      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 0056                     namayesh = 0;
00011f c046      	RJMP _0x67
                 ; 0000 0057 
                 ; 0000 0058                 }
                 ; 0000 0059                 else if (badje2 == 0){
                 _0x16:
000120 91e0 026c 	LDS  R30,_badje2
000122 91f0 026d 	LDS  R31,_badje2+1
000124 9730      	SBIW R30,0
000125 f441      	BRNE _0x18
                 ; 0000 005A                     badje2 = 1;
000126 940e 06d4 	CALL SUBOPT_0x4
                 ; 0000 005B                     nobat1_5 += 1;
                 ; 0000 005C                     namayesh = 1;
000128 940e 06cb 	CALL SUBOPT_0x3
                 ; 0000 005D                     LCD_namayesh_go_to_badje(nobat1_5, 2);
00012a e0a2      	LDI  R26,LOW(2)
00012b e0b0      	LDI  R27,0
00012c d246      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 005E                     namayesh = 0;
00012d c038      	RJMP _0x67
                 ; 0000 005F                 }
                 ; 0000 0060                 else if (badje3 == 0){
                 _0x18:
00012e 91e0 026e 	LDS  R30,_badje3
000130 91f0 026f 	LDS  R31,_badje3+1
000132 9730      	SBIW R30,0
000133 f441      	BRNE _0x1A
                 ; 0000 0061                     badje3 = 1;
000134 940e 06de 	CALL SUBOPT_0x5
                 ; 0000 0062                     nobat1_5 += 1;
                 ; 0000 0063                     namayesh = 1;
000136 940e 06cb 	CALL SUBOPT_0x3
                 ; 0000 0064                     LCD_namayesh_go_to_badje(nobat1_5, 3);
000138 e0a3      	LDI  R26,LOW(3)
000139 e0b0      	LDI  R27,0
00013a d238      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 0065                     namayesh = 0;
00013b c02a      	RJMP _0x67
                 ; 0000 0066                 }
                 ; 0000 0067                 else if (badje4 == 0){
                 _0x1A:
00013c 91e0 0270 	LDS  R30,_badje4
00013e 91f0 0271 	LDS  R31,_badje4+1
000140 9730      	SBIW R30,0
000141 f441      	BRNE _0x1C
                 ; 0000 0068                     badje4 = 1;
000142 940e 06e8 	CALL SUBOPT_0x6
                 ; 0000 0069                     nobat1_5 += 1;
                 ; 0000 006A                     namayesh = 1;
000144 940e 06cb 	CALL SUBOPT_0x3
                 ; 0000 006B                     LCD_namayesh_go_to_badje(nobat1_5, 4) ;
000146 e0a4      	LDI  R26,LOW(4)
000147 e0b0      	LDI  R27,0
000148 d22a      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 006C                     namayesh = 0;
000149 c01c      	RJMP _0x67
                 ; 0000 006D                 }
                 ; 0000 006E                 else if (badje5 == 0){
                 _0x1C:
00014a 91e0 0272 	LDS  R30,_badje5
00014c 91f0 0273 	LDS  R31,_badje5+1
00014e 9730      	SBIW R30,0
00014f f441      	BRNE _0x1E
                 ; 0000 006F                     badje5 = 1;
000150 940e 06f2 	CALL SUBOPT_0x7
                 ; 0000 0070                     nobat1_5 += 1;
                 ; 0000 0071                     namayesh = 1;
000152 940e 06cb 	CALL SUBOPT_0x3
                 ; 0000 0072                     LCD_namayesh_go_to_badje(nobat1_5, 5);
000154 e0a5      	LDI  R26,LOW(5)
000155 e0b0      	LDI  R27,0
000156 d21c      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 0073                     namayesh = 0;
000157 c00e      	RJMP _0x67
                 ; 0000 0074                 }
                 ; 0000 0075                 else {
                 _0x1E:
                 ; 0000 0076                     namayesh = 1;
000158 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 0077                     entezar = totalcount1_5 - nobat1_5;
00015a 01f5      	MOVW R30,R10
00015b 19ec      	SUB  R30,R12
00015c 09fd      	SBC  R31,R13
00015d 93e0 0288 	STS  _entezar,R30
00015f 93f0 0289 	STS  _entezar+1,R31
                 ; 0000 0078                     LCD_namayesh_entezar(entezar);
000161 91a0 0288 	LDS  R26,_entezar
000163 91b0 0289 	LDS  R27,_entezar+1
000165 d23b      	RCALL _LCD_namayesh_entezar
                 ; 0000 0079                     namayesh = 0;
                 _0x67:
000166 e0e0      	LDI  R30,LOW(0)
000167 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 007A                 }
                 ; 0000 007B             }
                 ; 0000 007C             break;
                 _0x15:
000169 c129      	RJMP _0x13
                 ; 0000 007D         case 2 :
                 _0x14:
00016a 30e2      	CPI  R30,LOW(0x2)
00016b e0a0      	LDI  R26,HIGH(0x2)
00016c 07fa      	CPC  R31,R26
00016d f561      	BRNE _0x20
                 ; 0000 007E             if(saat_yekonim){
00016e 940e 06b1 	CALL SUBOPT_0x0
000170 f141      	BREQ _0x21
                 ; 0000 007F                 TotalCount += 1;
000171 940e 06b7 	CALL SUBOPT_0x1
                 ; 0000 0080                 totalcount6 += 1;
000173 91e0 0260 	LDS  R30,_totalcount6
000175 91f0 0261 	LDS  R31,_totalcount6+1
000177 9631      	ADIW R30,1
000178 93e0 0260 	STS  _totalcount6,R30
00017a 93f0 0261 	STS  _totalcount6+1,R31
                 ; 0000 0081                 if(badje6 == 0){
00017c 91e0 0274 	LDS  R30,_badje6
00017e 91f0 0275 	LDS  R31,_badje6+1
000180 9730      	SBIW R30,0
000181 f461      	BRNE _0x22
                 ; 0000 0082                     badje6 = 1;
000182 940e 0708 	CALL SUBOPT_0xA
                 ; 0000 0083                     nobat6 += 1;
                 ; 0000 0084                     namayesh = 1;
000184 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 0085                     LCD_namayesh_go_to_badje(nobat6, 6);
000186 940e 0718 	CALL SUBOPT_0xB
000188 940e 071d 	CALL SUBOPT_0xC
                 ; 0000 0086                     namayesh = 0;
00018a e0e0      	LDI  R30,LOW(0)
00018b 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 0087                 }
                 ; 0000 0088                 else {
00018d c00b      	RJMP _0x23
                 _0x22:
                 ; 0000 0089                     int entezar6 = totalcount6 - nobat6;
                 ; 0000 008A                     LCD_namayesh_entezar(entezar6);
00018e 9722      	SBIW R28,2
                 ;	entezar6 -> Y+0
00018f 91a0 0262 	LDS  R26,_nobat6
000191 91b0 0263 	LDS  R27,_nobat6+1
000193 91e0 0260 	LDS  R30,_totalcount6
000195 91f0 0261 	LDS  R31,_totalcount6+1
000197 940e 0723 	CALL SUBOPT_0xD
                 ; 0000 008B                 }
                 _0x23:
                 ; 0000 008C             }
                 ; 0000 008D             break;
                 _0x21:
000199 c0f9      	RJMP _0x13
                 ; 0000 008E         case 3 :
                 _0x20:
00019a 30e3      	CPI  R30,LOW(0x3)
00019b e0a0      	LDI  R26,HIGH(0x3)
00019c 07fa      	CPC  R31,R26
00019d f561      	BRNE _0x24
                 ; 0000 008F             if(saat_yekonim){
00019e 940e 06b1 	CALL SUBOPT_0x0
0001a0 f141      	BREQ _0x25
                 ; 0000 0090                 TotalCount += 1;
0001a1 940e 06b7 	CALL SUBOPT_0x1
                 ; 0000 0091                 totalcount7 += 1;
0001a3 91e0 0264 	LDS  R30,_totalcount7
0001a5 91f0 0265 	LDS  R31,_totalcount7+1
0001a7 9631      	ADIW R30,1
0001a8 93e0 0264 	STS  _totalcount7,R30
0001aa 93f0 0265 	STS  _totalcount7+1,R31
                 ; 0000 0092                 if(badje7 == 0){
0001ac 91e0 0276 	LDS  R30,_badje7
0001ae 91f0 0277 	LDS  R31,_badje7+1
0001b0 9730      	SBIW R30,0
0001b1 f461      	BRNE _0x26
                 ; 0000 0093                     badje7 = 1;
0001b2 940e 072d 	CALL SUBOPT_0xE
                 ; 0000 0094                     nobat7 += 1;
                 ; 0000 0095                     namayesh = 1;
0001b4 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 0096                     LCD_namayesh_go_to_badje(nobat7, 7) ;
0001b6 940e 073d 	CALL SUBOPT_0xF
0001b8 940e 0742 	CALL SUBOPT_0x10
                 ; 0000 0097                     namayesh = 0;
0001ba e0e0      	LDI  R30,LOW(0)
0001bb 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 0098                 }
                 ; 0000 0099                 else {
0001bd c00b      	RJMP _0x27
                 _0x26:
                 ; 0000 009A 
                 ; 0000 009B                     int entezar7 = totalcount7 - nobat7;
                 ; 0000 009C                     LCD_namayesh_entezar(entezar7);
0001be 9722      	SBIW R28,2
                 ;	entezar7 -> Y+0
0001bf 91a0 0266 	LDS  R26,_nobat7
0001c1 91b0 0267 	LDS  R27,_nobat7+1
0001c3 91e0 0264 	LDS  R30,_totalcount7
0001c5 91f0 0265 	LDS  R31,_totalcount7+1
0001c7 940e 0723 	CALL SUBOPT_0xD
                 ; 0000 009D                 }
                 _0x27:
                 ; 0000 009E             }
                 ; 0000 009F             break;
                 _0x25:
0001c9 c0c9      	RJMP _0x13
                 ; 0000 00A0         case 9 : //badje1
                 _0x24:
0001ca 30e9      	CPI  R30,LOW(0x9)
0001cb e0a0      	LDI  R26,HIGH(0x9)
0001cc 07fa      	CPC  R31,R26
0001cd f4c1      	BRNE _0x28
                 ; 0000 00A1             badje1 = 0;
0001ce 940e 0748 	CALL SUBOPT_0x11
                 ; 0000 00A2             if (totalcount1_5 > nobat1_5){
                +
0001d0 14ca     +CP R12 , R10
0001d1 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
0001d2 f494      	BRGE _0x29
                 ; 0000 00A3                 namayesh = 1;
0001d3 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00A4                 d1 = nobat1_5 + 1;
0001d5 01f6      	MOVW R30,R12
0001d6 9631      	ADIW R30,1
0001d7 93e0 027a 	STS  _d1,R30
0001d9 93f0 027b 	STS  _d1+1,R31
                 ; 0000 00A5                 LCD_namayesh_go_to_badje(d1, 1);
0001db 93fa      	ST   -Y,R31
0001dc 93ea      	ST   -Y,R30
0001dd e0a1      	LDI  R26,LOW(1)
0001de e0b0      	LDI  R27,0
0001df d193      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 00A6                 badje1 = 1;
0001e0 940e 06c1 	CALL SUBOPT_0x2
                 ; 0000 00A7                 nobat1_5 += 1;
                 ; 0000 00A8                 namayesh = 0;
0001e2 e0e0      	LDI  R30,LOW(0)
0001e3 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00A9             }
                 ; 0000 00AA             break;
                 _0x29:
0001e5 c0ad      	RJMP _0x13
                 ; 0000 00AB         case 8 : //badje2
                 _0x28:
0001e6 30e8      	CPI  R30,LOW(0x8)
0001e7 e0a0      	LDI  R26,HIGH(0x8)
0001e8 07fa      	CPC  R31,R26
0001e9 f4c1      	BRNE _0x2A
                 ; 0000 00AC             badje2 = 0;
0001ea 940e 074e 	CALL SUBOPT_0x12
                 ; 0000 00AD             if (totalcount1_5 > nobat1_5){
                +
0001ec 14ca     +CP R12 , R10
0001ed 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
0001ee f494      	BRGE _0x2B
                 ; 0000 00AE                 namayesh = 1;
0001ef 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00AF                 d2 = nobat1_5 + 1;
0001f1 01f6      	MOVW R30,R12
0001f2 9631      	ADIW R30,1
0001f3 93e0 027c 	STS  _d2,R30
0001f5 93f0 027d 	STS  _d2+1,R31
                 ; 0000 00B0                 LCD_namayesh_go_to_badje(d2, 2);
0001f7 93fa      	ST   -Y,R31
0001f8 93ea      	ST   -Y,R30
0001f9 e0a2      	LDI  R26,LOW(2)
0001fa e0b0      	LDI  R27,0
0001fb d177      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 00B1                 badje2 = 1;
0001fc 940e 06d4 	CALL SUBOPT_0x4
                 ; 0000 00B2                 nobat1_5 += 1;
                 ; 0000 00B3                 namayesh = 0;
0001fe e0e0      	LDI  R30,LOW(0)
0001ff 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00B4             }
                 ; 0000 00B5             break;
                 _0x2B:
000201 c091      	RJMP _0x13
                 ; 0000 00B6         case 7 : //badje3
                 _0x2A:
000202 30e7      	CPI  R30,LOW(0x7)
000203 e0a0      	LDI  R26,HIGH(0x7)
000204 07fa      	CPC  R31,R26
000205 f4c1      	BRNE _0x2C
                 ; 0000 00B7             badje3 = 0;
000206 940e 0754 	CALL SUBOPT_0x13
                 ; 0000 00B8             if (totalcount1_5 > nobat1_5){
                +
000208 14ca     +CP R12 , R10
000209 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
00020a f494      	BRGE _0x2D
                 ; 0000 00B9                 namayesh = 1;
00020b 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00BA                 d3 = nobat1_5 + 1;
00020d 01f6      	MOVW R30,R12
00020e 9631      	ADIW R30,1
00020f 93e0 027e 	STS  _d3,R30
000211 93f0 027f 	STS  _d3+1,R31
                 ; 0000 00BB                 LCD_namayesh_go_to_badje(d3, 3);
000213 93fa      	ST   -Y,R31
000214 93ea      	ST   -Y,R30
000215 e0a3      	LDI  R26,LOW(3)
000216 e0b0      	LDI  R27,0
000217 d15b      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 00BC                 badje3 = 1;
000218 940e 06de 	CALL SUBOPT_0x5
                 ; 0000 00BD                 nobat1_5 += 1;
                 ; 0000 00BE                 namayesh = 0;
00021a e0e0      	LDI  R30,LOW(0)
00021b 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00BF             }
                 ; 0000 00C0             break;
                 _0x2D:
00021d c075      	RJMP _0x13
                 ; 0000 00C1         case 6 : //badje4
                 _0x2C:
00021e 30e6      	CPI  R30,LOW(0x6)
00021f e0a0      	LDI  R26,HIGH(0x6)
000220 07fa      	CPC  R31,R26
000221 f4c1      	BRNE _0x2E
                 ; 0000 00C2             badje4 = 0;
000222 940e 075a 	CALL SUBOPT_0x14
                 ; 0000 00C3             if (totalcount1_5 > nobat1_5){
                +
000224 14ca     +CP R12 , R10
000225 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
000226 f494      	BRGE _0x2F
                 ; 0000 00C4                 namayesh = 1;
000227 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00C5                 d4 = nobat1_5 + 1;
000229 01f6      	MOVW R30,R12
00022a 9631      	ADIW R30,1
00022b 93e0 0280 	STS  _d4,R30
00022d 93f0 0281 	STS  _d4+1,R31
                 ; 0000 00C6                 LCD_namayesh_go_to_badje(d4, 4) ;
00022f 93fa      	ST   -Y,R31
000230 93ea      	ST   -Y,R30
000231 e0a4      	LDI  R26,LOW(4)
000232 e0b0      	LDI  R27,0
000233 d13f      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 00C7                 badje4 = 1;
000234 940e 06e8 	CALL SUBOPT_0x6
                 ; 0000 00C8                 nobat1_5 += 1;
                 ; 0000 00C9                 namayesh = 0;
000236 e0e0      	LDI  R30,LOW(0)
000237 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00CA             }
                 ; 0000 00CB             break;
                 _0x2F:
000239 c059      	RJMP _0x13
                 ; 0000 00CC         case 5 : //badje5
                 _0x2E:
00023a 30e5      	CPI  R30,LOW(0x5)
00023b e0a0      	LDI  R26,HIGH(0x5)
00023c 07fa      	CPC  R31,R26
00023d f4c1      	BRNE _0x30
                 ; 0000 00CD             badje5 = 0;
00023e 940e 0760 	CALL SUBOPT_0x15
                 ; 0000 00CE             if (totalcount1_5 > nobat1_5){
                +
000240 14ca     +CP R12 , R10
000241 04db     +CPC R13 , R11
                 	__CPWRR 12,13,10,11
000242 f494      	BRGE _0x31
                 ; 0000 00CF                 namayesh = 1;
000243 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00D0                 d5 = nobat1_5 + 1;
000245 01f6      	MOVW R30,R12
000246 9631      	ADIW R30,1
000247 93e0 0282 	STS  _d5,R30
000249 93f0 0283 	STS  _d5+1,R31
                 ; 0000 00D1                 LCD_namayesh_go_to_badje(d5, 5);
00024b 93fa      	ST   -Y,R31
00024c 93ea      	ST   -Y,R30
00024d e0a5      	LDI  R26,LOW(5)
00024e e0b0      	LDI  R27,0
00024f d123      	RCALL _LCD_namayesh_go_to_badje
                 ; 0000 00D2                 badje5 = 1;
000250 940e 06f2 	CALL SUBOPT_0x7
                 ; 0000 00D3                 nobat1_5 += 1;
                 ; 0000 00D4                 namayesh = 0;
000252 e0e0      	LDI  R30,LOW(0)
000253 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00D5             }
                 ; 0000 00D6             break;
                 _0x31:
000255 c03d      	RJMP _0x13
                 ; 0000 00D7         case 4 : //badje6
                 _0x30:
000256 30e4      	CPI  R30,LOW(0x4)
000257 e0a0      	LDI  R26,HIGH(0x4)
000258 07fa      	CPC  R31,R26
000259 f4e1      	BRNE _0x32
                 ; 0000 00D8             badje6 = 0;
00025a 940e 0766 	CALL SUBOPT_0x16
                 ; 0000 00D9             if (totalcount6 > nobat6){
00025c 940e 0718 	CALL SUBOPT_0xB
00025e 91a0 0260 	LDS  R26,_totalcount6
000260 91b0 0261 	LDS  R27,_totalcount6+1
000262 17ea      	CP   R30,R26
000263 07fb      	CPC  R31,R27
000264 f484      	BRGE _0x33
                 ; 0000 00DA                 namayesh = 1;
000265 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00DB                 d6 = nobat6 + 1;
000267 940e 0718 	CALL SUBOPT_0xB
000269 9631      	ADIW R30,1
00026a 93e0 0284 	STS  _d6,R30
00026c 93f0 0285 	STS  _d6+1,R31
                 ; 0000 00DC                 LCD_namayesh_go_to_badje(d6, 6);
00026e 940e 071d 	CALL SUBOPT_0xC
                 ; 0000 00DD                 badje6 = 1;
000270 940e 0708 	CALL SUBOPT_0xA
                 ; 0000 00DE                 nobat6 += 1;
                 ; 0000 00DF                 namayesh = 0;
000272 e0e0      	LDI  R30,LOW(0)
000273 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00E0             }
                 ; 0000 00E1             break;
                 _0x33:
000275 c01d      	RJMP _0x13
                 ; 0000 00E2         case 0 : //badje7
                 _0x32:
000276 9730      	SBIW R30,0
000277 f4d9      	BRNE _0x13
                 ; 0000 00E3             badje7 = 0;
000278 940e 076c 	CALL SUBOPT_0x17
                 ; 0000 00E4             if (totalcount7 > nobat7){
00027a 940e 073d 	CALL SUBOPT_0xF
00027c 91a0 0264 	LDS  R26,_totalcount7
00027e 91b0 0265 	LDS  R27,_totalcount7+1
000280 17ea      	CP   R30,R26
000281 07fb      	CPC  R31,R27
000282 f484      	BRGE _0x35
                 ; 0000 00E5                 namayesh = 1;
000283 940e 06fc 	CALL SUBOPT_0x8
                 ; 0000 00E6                 d7 = nobat7 + 1;
000285 940e 073d 	CALL SUBOPT_0xF
000287 9631      	ADIW R30,1
000288 93e0 0286 	STS  _d7,R30
00028a 93f0 0287 	STS  _d7+1,R31
                 ; 0000 00E7                 LCD_namayesh_go_to_badje(d7, 7);
00028c 940e 0742 	CALL SUBOPT_0x10
                 ; 0000 00E8                 badje7 = 1;
00028e 940e 072d 	CALL SUBOPT_0xE
                 ; 0000 00E9                 nobat7 += 1;
                 ; 0000 00EA                 namayesh = 0;
000290 e0e0      	LDI  R30,LOW(0)
000291 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00EB             }
                 ; 0000 00EC             break;
                 _0x35:
                 ; 0000 00ED 
                 ; 0000 00EE         }
                 _0x13:
                 ; 0000 00EF       }
                 ; 0000 00F0 
                 ; 0000 00F1         }
                 _0xA:
                 ; 0000 00F2         else{
000293 c011      	RJMP _0x36
                 _0x9:
                 ; 0000 00F3             totalcount1_5 = 0, nobat1_5 = 0;
000294 940e 0772 	CALL SUBOPT_0x18
                 ; 0000 00F4             totalcount6 = 0, nobat6 = 0;
                 ; 0000 00F5             totalcount7 = 0, nobat7 = 0;
                 ; 0000 00F6             TotalCount = 0;
                 ; 0000 00F7             badje1 = 0, badje2 = 0, badje3 = 0, badje4 = 0, badje5 = 0, badje6 = 0, badje7 = 0;
000296 940e 074e 	CALL SUBOPT_0x12
000298 940e 0754 	CALL SUBOPT_0x13
00029a 940e 075a 	CALL SUBOPT_0x14
00029c 940e 0760 	CALL SUBOPT_0x15
00029e 940e 0766 	CALL SUBOPT_0x16
0002a0 940e 076c 	CALL SUBOPT_0x17
                 ; 0000 00F8             namayesh = 0;
0002a2 e0e0      	LDI  R30,LOW(0)
0002a3 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 00F9             //tanzimat saat
                 ; 0000 00FA         }
                 _0x36:
                 ; 0000 00FB     }
0002a5 9119      	LD   R17,Y+
0002a6 91e9      	LD   R30,Y+
0002a7 bfef      	OUT  SREG,R30
0002a8 91f9      	LD   R31,Y+
0002a9 91e9      	LD   R30,Y+
0002aa 91b9      	LD   R27,Y+
0002ab 91a9      	LD   R26,Y+
0002ac 9199      	LD   R25,Y+
0002ad 9189      	LD   R24,Y+
0002ae 9179      	LD   R23,Y+
0002af 9169      	LD   R22,Y+
0002b0 90f9      	LD   R15,Y+
0002b1 9019      	LD   R1,Y+
0002b2 9009      	LD   R0,Y+
0002b3 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00FE {
                 _main:
                 ; .FSTART _main
                 ; 0000 00FF     DDRB = 0xFF;    //  Port B as output - To LCD
0002b4 efef      	LDI  R30,LOW(255)
0002b5 bbe7      	OUT  0x17,R30
                 ; 0000 0100     PORTB = 0x00;   //  Initialize it by 0000_0000
0002b6 e0e0      	LDI  R30,LOW(0)
0002b7 bbe8      	OUT  0x18,R30
                 ; 0000 0101     DDRC = 0xF0;    //  Port C as half input half output - From Keypad
0002b8 efe0      	LDI  R30,LOW(240)
0002b9 bbe4      	OUT  0x14,R30
                 ; 0000 0102     PORTC = 0x0F;   //  Initialize it by 0000_1111
0002ba e0ef      	LDI  R30,LOW(15)
0002bb bbe5      	OUT  0x15,R30
                 ; 0000 0103 
                 ; 0000 0104     // External Interrupt(s) initialization
                 ; 0000 0105     // INT0: On
                 ; 0000 0106     // INT0 Mode: Falling Edge
                 ; 0000 0107     // INT1: Off
                 ; 0000 0108     // INT2: Off
                 ; 0000 0109     GICR |= (0<<INT1) | (1<<INT0) | (0<<INT2);
0002bc b7eb      	IN   R30,0x3B
0002bd 64e0      	ORI  R30,0x40
0002be bfeb      	OUT  0x3B,R30
                 ; 0000 010A     MCUCR = (0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
0002bf e0e2      	LDI  R30,LOW(2)
0002c0 bfe5      	OUT  0x35,R30
                 ; 0000 010B     MCUCSR = (0<<ISC2);
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 bfe4      	OUT  0x34,R30
                 ; 0000 010C     GIFR = (0<<INTF1) | (1<<INTF0) | (0<<INTF2);
0002c3 e4e0      	LDI  R30,LOW(64)
0002c4 bfea      	OUT  0x3A,R30
                 ; 0000 010D 
                 ; 0000 010E     // Timer/Counter 1 initialization
                 ; 0000 010F     // Clock source: System Clock
                 ; 0000 0110     // Clock value: 31/250 kHz
                 ; 0000 0111     // Mode: Normal top=0xFFFF
                 ; 0000 0112     // OC1A output: Disconnected
                 ; 0000 0113     // OC1B output: Disconnected
                 ; 0000 0114     // Noise Canceler: Off
                 ; 0000 0115     // Input Capture on Falling Edge
                 ; 0000 0116     // Timer Period: 1 s
                 ; 0000 0117     // Timer1 Overflow Interrupt: On
                 ; 0000 0118     // Input Capture Interrupt: Off
                 ; 0000 0119     // Compare A Match Interrupt: Off
                 ; 0000 011A     // Compare B Match Interrupt: Off
                 ; 0000 011B     TCCR1A = (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 bdef      	OUT  0x2F,R30
                 ; 0000 011C     TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
0002c7 e0e4      	LDI  R30,LOW(4)
0002c8 bdee      	OUT  0x2E,R30
                 ; 0000 011D     TCNT1H = 0x85;
0002c9 e8e5      	LDI  R30,LOW(133)
0002ca bded      	OUT  0x2D,R30
                 ; 0000 011E     TCNT1L = 0xEE;
0002cb eeee      	LDI  R30,LOW(238)
0002cc bdec      	OUT  0x2C,R30
                 ; 0000 011F     ICR1H = 0x00;
0002cd e0e0      	LDI  R30,LOW(0)
0002ce bde7      	OUT  0x27,R30
                 ; 0000 0120     ICR1L = 0x00;
0002cf bde6      	OUT  0x26,R30
                 ; 0000 0121     OCR1AH = 0x00;
0002d0 bdeb      	OUT  0x2B,R30
                 ; 0000 0122     OCR1AL = 0x00;
0002d1 bdea      	OUT  0x2A,R30
                 ; 0000 0123     OCR1BH = 0x00;
0002d2 bde9      	OUT  0x29,R30
                 ; 0000 0124     OCR1BL = 0x00;
0002d3 bde8      	OUT  0x28,R30
                 ; 0000 0125 
                 ; 0000 0126     // Global Enable Interrupts
                 ; 0000 0127     #asm("sei")
0002d4 9478      	sei
                 ; 0000 0128 
                 ; 0000 0129     totalcount1_5 = 0, nobat1_5 = 0;
0002d5 940e 0772 	CALL SUBOPT_0x18
                 ; 0000 012A     totalcount6 = 0, nobat6 = 0;
                 ; 0000 012B     totalcount7 = 0, nobat7 = 0;
                 ; 0000 012C     TotalCount = 0;
                 ; 0000 012D     badje1 = 0, badje2 = 0, badje3 = 0, badje4 = 0, badje5 = 0, badje6 = 0, badje7 = 0;
0002d7 940e 074e 	CALL SUBOPT_0x12
0002d9 940e 0754 	CALL SUBOPT_0x13
0002db 940e 075a 	CALL SUBOPT_0x14
0002dd 940e 0760 	CALL SUBOPT_0x15
0002df 940e 0766 	CALL SUBOPT_0x16
0002e1 940e 076c 	CALL SUBOPT_0x17
                 ; 0000 012E     namayesh = 0;
0002e3 e0e0      	LDI  R30,LOW(0)
0002e4 940e 0703 	CALL SUBOPT_0x9
                 ; 0000 012F     saat_yekonim = 0;
0002e6 e0e0      	LDI  R30,LOW(0)
0002e7 93e0 02a7 	STS  _saat_yekonim,R30
0002e9 93e0 02a8 	STS  _saat_yekonim+1,R30
                 ; 0000 0130     lcd_init(16);
0002eb e1a0      	LDI  R26,LOW(16)
0002ec 940e 0682 	CALL _lcd_init
                 ; 0000 0131     second = 0 ;
0002ee 2444      	CLR  R4
0002ef 2455      	CLR  R5
                 ; 0000 0132 
                 ; 0000 0133     while (1)
                 _0x37:
                 ; 0000 0134         {
                 ; 0000 0135             if (hour == 1 || hour == 12)
0002f0 e0e1      	LDI  R30,LOW(1)
0002f1 e0f0      	LDI  R31,HIGH(1)
0002f2 15e8      	CP   R30,R8
0002f3 05f9      	CPC  R31,R9
0002f4 f029      	BREQ _0x3B
0002f5 e0ec      	LDI  R30,LOW(12)
0002f6 e0f0      	LDI  R31,HIGH(12)
0002f7 15e8      	CP   R30,R8
0002f8 05f9      	CPC  R31,R9
0002f9 f439      	BRNE _0x3A
                 _0x3B:
                 ; 0000 0136                 sprintf(lcd_buffer,"   %02d:%02d:%02d  PM", hour, minute, second);
0002fa ebe3      	LDI  R30,LOW(_lcd_buffer)
0002fb e0f2      	LDI  R31,HIGH(_lcd_buffer)
0002fc 93fa      	ST   -Y,R31
0002fd 93ea      	ST   -Y,R30
                +
0002fe e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0002ff e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000300 c006      	RJMP _0x68
                 ; 0000 0137             else
                 _0x3A:
                 ; 0000 0138                 sprintf(lcd_buffer,"   %02d:%02d:%02d  AM", hour, minute, second);
000301 ebe3      	LDI  R30,LOW(_lcd_buffer)
000302 e0f2      	LDI  R31,HIGH(_lcd_buffer)
000303 93fa      	ST   -Y,R31
000304 93ea      	ST   -Y,R30
                +
000305 e8e0     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
000306 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
                 _0x68:
000307 93fa      	ST   -Y,R31
000308 93ea      	ST   -Y,R30
000309 01f4      	MOVW R30,R8
00030a 940e 078c 	CALL SUBOPT_0x19
00030c 01f3      	MOVW R30,R6
00030d 940e 078c 	CALL SUBOPT_0x19
00030f 01f2      	MOVW R30,R4
000310 940e 078c 	CALL SUBOPT_0x19
000312 e08c      	LDI  R24,12
000313 940e 0586 	CALL _sprintf
000315 9660      	ADIW R28,16
                 ; 0000 0139             lcd_gotoxy(0,0);
000316 940e 0791 	CALL SUBOPT_0x1A
                 ; 0000 013A             lcd_puts(lcd_buffer);
000318 eba3      	LDI  R26,LOW(_lcd_buffer)
000319 e0b2      	LDI  R27,HIGH(_lcd_buffer)
00031a 940e 0796 	CALL SUBOPT_0x1B
                 ; 0000 013B             delay_ms(1000);
                 ; 0000 013C             time_after(1000, &hour, &minute, &second);
00031c eee8      	LDI  R30,LOW(1000)
00031d e0f3      	LDI  R31,HIGH(1000)
00031e 93fa      	ST   -Y,R31
00031f 93ea      	ST   -Y,R30
000320 e0e8      	LDI  R30,LOW(8)
000321 e0f0      	LDI  R31,HIGH(8)
000322 93fa      	ST   -Y,R31
000323 93ea      	ST   -Y,R30
000324 e0e6      	LDI  R30,LOW(6)
000325 e0f0      	LDI  R31,HIGH(6)
000326 93fa      	ST   -Y,R31
000327 93ea      	ST   -Y,R30
000328 e0a4      	LDI  R26,LOW(4)
000329 e0b0      	LDI  R27,HIGH(4)
00032a d004      	RCALL _time_after
                 ; 0000 013D             lcd_clear();
00032b 940e 0632 	CALL _lcd_clear
                 ; 0000 013E     }
00032d cfc2      	RJMP _0x37
                 ; 0000 013F }
                 _0x3E:
00032e cfff      	RJMP _0x3E
                 ; .FEND
                 ;
                 ;void time_after(int n, int* pthour, int* ptminute, int* ptsecond)
                 ; 0000 0142 {
                 _time_after:
                 ; .FSTART _time_after
                 ; 0000 0143     unsigned char second = *ptsecond;
                 ; 0000 0144     unsigned char minute = *ptminute;
                 ; 0000 0145     unsigned char hour = *pthour;
                 ; 0000 0146 
                 ; 0000 0147     n = n / 1000;
00032f 93ba      	ST   -Y,R27
000330 93aa      	ST   -Y,R26
000331 940e 083f 	CALL __SAVELOCR4
                 ;	n -> Y+10
                 ;	*pthour -> Y+8
                 ;	*ptminute -> Y+6
                 ;	*ptsecond -> Y+4
                 ;	second -> R17
                 ;	minute -> R16
                 ;	hour -> R19
000333 81ac      	LDD  R26,Y+4
000334 81bd      	LDD  R27,Y+4+1
000335 91ec      	LD   R30,X
000336 2f1e      	MOV  R17,R30
000337 81ae      	LDD  R26,Y+6
000338 81bf      	LDD  R27,Y+6+1
000339 91ec      	LD   R30,X
00033a 2f0e      	MOV  R16,R30
00033b 85a8      	LDD  R26,Y+8
00033c 85b9      	LDD  R27,Y+8+1
00033d 91ec      	LD   R30,X
00033e 2f3e      	MOV  R19,R30
00033f 85aa      	LDD  R26,Y+10
000340 85bb      	LDD  R27,Y+10+1
000341 eee8      	LDI  R30,LOW(1000)
000342 e0f3      	LDI  R31,HIGH(1000)
000343 940e 080f 	CALL __DIVW21
000345 87ea      	STD  Y+10,R30
000346 87fb      	STD  Y+10+1,R31
                 ; 0000 0148     second += n;
000347 85ea      	LDD  R30,Y+10
000348 0f1e      	ADD  R17,R30
                 ; 0000 0149     if (second > 59)
000349 331c      	CPI  R17,60
00034a f040      	BRLO _0x3F
                 ; 0000 014A     {
                 ; 0000 014B         minute += 1;
00034b 5f0f      	SUBI R16,-LOW(1)
                 ; 0000 014C         second = second % 60;
00034c 2fa1      	MOV  R26,R17
00034d 27bb      	CLR  R27
00034e e3ec      	LDI  R30,LOW(60)
00034f e0f0      	LDI  R31,HIGH(60)
000350 940e 0814 	CALL __MODW21
000352 2f1e      	MOV  R17,R30
                 ; 0000 014D     }
                 ; 0000 014E     if (minute > 59)
                 _0x3F:
000353 330c      	CPI  R16,60
000354 f040      	BRLO _0x40
                 ; 0000 014F     {
                 ; 0000 0150         hour += 1;
000355 5f3f      	SUBI R19,-LOW(1)
                 ; 0000 0151         minute = minute % 60;
000356 2fa0      	MOV  R26,R16
000357 27bb      	CLR  R27
000358 e3ec      	LDI  R30,LOW(60)
000359 e0f0      	LDI  R31,HIGH(60)
00035a 940e 0814 	CALL __MODW21
00035c 2f0e      	MOV  R16,R30
                 ; 0000 0152     }
                 ; 0000 0153 
                 ; 0000 0154     *ptsecond = second;
                 _0x40:
00035d 2fe1      	MOV  R30,R17
00035e 81ac      	LDD  R26,Y+4
00035f 81bd      	LDD  R27,Y+4+1
000360 e0f0      	LDI  R31,0
000361 93ed      	ST   X+,R30
000362 93fc      	ST   X,R31
                 ; 0000 0155     *ptminute = minute;
000363 2fe0      	MOV  R30,R16
000364 81ae      	LDD  R26,Y+6
000365 81bf      	LDD  R27,Y+6+1
000366 e0f0      	LDI  R31,0
000367 93ed      	ST   X+,R30
000368 93fc      	ST   X,R31
                 ; 0000 0156     *pthour = hour;
000369 2fe3      	MOV  R30,R19
00036a 85a8      	LDD  R26,Y+8
00036b 85b9      	LDD  R27,Y+8+1
00036c e0f0      	LDI  R31,0
00036d 93ed      	ST   X+,R30
00036e 93fc      	ST   X,R31
                 ; 0000 0157 }
00036f 940e 0846 	CALL __LOADLOCR4
000371 962c      	ADIW R28,12
000372 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_namayesh_go_to_badje (int a, int b)
                 ; 0000 015A {
                 _LCD_namayesh_go_to_badje:
                 ; .FSTART _LCD_namayesh_go_to_badje
                 ; 0000 015B     lcd_clear();
000373 93ba      	ST   -Y,R27
000374 93aa      	ST   -Y,R26
                 ;	a -> Y+2
                 ;	b -> Y+0
000375 940e 0632 	CALL _lcd_clear
                 ; 0000 015C     str1[10];
                +
000377 91e0 02b3+LDS R30 , _str1 + ( 10 )
                 	__GETB1MN _str1,10
                 ; 0000 015D     itoa(a, str1);
000379 81ea      	LDD  R30,Y+2
00037a 81fb      	LDD  R31,Y+2+1
00037b 93fa      	ST   -Y,R31
00037c 93ea      	ST   -Y,R30
00037d eaa9      	LDI  R26,LOW(_str1)
00037e e0b2      	LDI  R27,HIGH(_str1)
00037f 940e 05d3 	CALL _itoa
                 ; 0000 015E     lcd_gotoxy(0, 0);
000381 940e 0791 	CALL SUBOPT_0x1A
                 ; 0000 015F     lcd_puts(str1);
000383 eaa9      	LDI  R26,LOW(_str1)
000384 e0b2      	LDI  R27,HIGH(_str1)
000385 940e 0660 	CALL _lcd_puts
                 ; 0000 0160     lcd_gotoxy(5, 0);
000387 e0e5      	LDI  R30,LOW(5)
000388 940e 079c 	CALL SUBOPT_0x1C
                 ; 0000 0161     lcd_putsf("go to badje : ");
                +
00038a e9a6     +LDI R26 , LOW ( 2 * _0x0 + ( 44 ) )
00038b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW2FN _0x0,44
00038c 940e 066f 	CALL _lcd_putsf
                 ; 0000 0162     itoa(b, str2);
00038e 81e8      	LD   R30,Y
00038f 81f9      	LDD  R31,Y+1
000390 93fa      	ST   -Y,R31
000391 93ea      	ST   -Y,R30
000392 e8aa      	LDI  R26,LOW(_str2)
000393 e0b2      	LDI  R27,HIGH(_str2)
000394 940e 05d3 	CALL _itoa
                 ; 0000 0163     lcd_gotoxy(15, 0);
000396 e0ef      	LDI  R30,LOW(15)
000397 940e 079c 	CALL SUBOPT_0x1C
                 ; 0000 0164     lcd_puts(str2);
000399 e8aa      	LDI  R26,LOW(_str2)
00039a e0b2      	LDI  R27,HIGH(_str2)
00039b 940e 0796 	CALL SUBOPT_0x1B
                 ; 0000 0165     delay_ms(1000);
                 ; 0000 0166     lcd_clear();
00039d 940e 0632 	CALL _lcd_clear
                 ; 0000 0167 }
00039f 9624      	ADIW R28,4
0003a0 9508      	RET
                 ; .FEND
                 ;//==========================================================================================
                 ;void LCD_namayesh_entezar (int a){
                 ; 0000 0169 void LCD_namayesh_entezar (int a){
                 _LCD_namayesh_entezar:
                 ; .FSTART _LCD_namayesh_entezar
                 ; 0000 016A     lcd_clear();
0003a1 93ba      	ST   -Y,R27
0003a2 93aa      	ST   -Y,R26
                 ;	a -> Y+0
0003a3 940e 0632 	CALL _lcd_clear
                 ; 0000 016B     str3[17];
                +
0003a5 91e0 02a5+LDS R30 , _str3 + ( 17 )
                 	__GETB1MN _str3,17
                 ; 0000 016C     itoa(a, str3);
0003a7 81e8      	LD   R30,Y
0003a8 81f9      	LDD  R31,Y+1
0003a9 93fa      	ST   -Y,R31
0003aa 93ea      	ST   -Y,R30
0003ab e9a4      	LDI  R26,LOW(_str3)
0003ac e0b2      	LDI  R27,HIGH(_str3)
0003ad 940e 05d3 	CALL _itoa
                 ; 0000 016D     lcd_gotoxy(0, 0);
0003af 940e 0791 	CALL SUBOPT_0x1A
                 ; 0000 016E     lcd_puts(str1);
0003b1 eaa9      	LDI  R26,LOW(_str1)
0003b2 e0b2      	LDI  R27,HIGH(_str1)
0003b3 940e 0660 	CALL _lcd_puts
                 ; 0000 016F     lcd_gotoxy(4, 0);
0003b5 e0e4      	LDI  R30,LOW(4)
0003b6 940e 079c 	CALL SUBOPT_0x1C
                 ; 0000 0170     lcd_putsf(" nafar joloye shoma hastand");
                +
0003b8 eaa5     +LDI R26 , LOW ( 2 * _0x0 + ( 59 ) )
0003b9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 59 ) )
                 	__POINTW2FN _0x0,59
0003ba 940e 066f 	CALL _lcd_putsf
                 ; 0000 0171     delay_ms(500);
0003bc efa4      	LDI  R26,LOW(500)
0003bd e0b1      	LDI  R27,HIGH(500)
0003be 940e 07e5 	CALL _delay_ms
                 ; 0000 0172     lcd_clear();
0003c0 940e 0632 	CALL _lcd_clear
                 ; 0000 0173 }
0003c2 940c 0630 	JMP  _0x20C0003
                 ; .FEND
                 ;//=========================================================================================
                 ;
                 ;
                 ;//=========================================================================================
                 ;char GetKey()
                 ; 0000 0179 {
                 _GetKey:
                 ; .FSTART _GetKey
                 ; 0000 017A unsigned char key_code = 0xFF;
                 ; 0000 017B unsigned char columns;
                 ; 0000 017C 
                 ; 0000 017D PORTC = 0xFF;
0003c4 931a      	ST   -Y,R17
0003c5 930a      	ST   -Y,R16
                 ;	key_code -> R17
                 ;	columns -> R16
0003c6 ef1f      	LDI  R17,255
0003c7 efef      	LDI  R30,LOW(255)
0003c8 bbe5      	OUT  0x15,R30
                 ; 0000 017E // first row
                 ; 0000 017F PORTC.4 = 0;
0003c9 98ac      	CBI  0x15,4
                 ; 0000 0180 columns = PINC & 0x07;
0003ca 940e 07a0 	CALL SUBOPT_0x1D
                 ; 0000 0181 if(columns != 0x07)
0003cc f081      	BREQ _0x43
                 ; 0000 0182   {
                 ; 0000 0183   switch(columns)
0003cd 940e 07a5 	CALL SUBOPT_0x1E
                 ; 0000 0184     {
                 ; 0000 0185     case 0b110 : key_code = 1; break;
0003cf f411      	BRNE _0x47
0003d0 e011      	LDI  R17,LOW(1)
0003d1 c00b      	RJMP _0x46
                 ; 0000 0186     case 0b101 : key_code = 2; break;
                 _0x47:
0003d2 30e5      	CPI  R30,LOW(0x5)
0003d3 e0a0      	LDI  R26,HIGH(0x5)
0003d4 07fa      	CPC  R31,R26
0003d5 f411      	BRNE _0x48
0003d6 e012      	LDI  R17,LOW(2)
0003d7 c005      	RJMP _0x46
                 ; 0000 0187     case 0b011 : key_code = 3; break;
                 _0x48:
0003d8 30e3      	CPI  R30,LOW(0x3)
0003d9 e0a0      	LDI  R26,HIGH(0x3)
0003da 07fa      	CPC  R31,R26
0003db f409      	BRNE _0x46
0003dc e013      	LDI  R17,LOW(3)
                 ; 0000 0188     }
                 _0x46:
                 ; 0000 0189   }
                 ; 0000 018A PORTC.4 = 1;
                 _0x43:
0003dd 9aac      	SBI  0x15,4
                 ; 0000 018B // second row
                 ; 0000 018C PORTC.5 = 0;
0003de 98ad      	CBI  0x15,5
                 ; 0000 018D columns = PINC & 0x07;
0003df 940e 07a0 	CALL SUBOPT_0x1D
                 ; 0000 018E if(columns != 0x07)
0003e1 f081      	BREQ _0x4E
                 ; 0000 018F   {
                 ; 0000 0190   switch(columns)
0003e2 940e 07a5 	CALL SUBOPT_0x1E
                 ; 0000 0191     {
                 ; 0000 0192     case 0b110 : key_code = 4; break;
0003e4 f411      	BRNE _0x52
0003e5 e014      	LDI  R17,LOW(4)
0003e6 c00b      	RJMP _0x51
                 ; 0000 0193     case 0b101 : key_code = 5; break;
                 _0x52:
0003e7 30e5      	CPI  R30,LOW(0x5)
0003e8 e0a0      	LDI  R26,HIGH(0x5)
0003e9 07fa      	CPC  R31,R26
0003ea f411      	BRNE _0x53
0003eb e015      	LDI  R17,LOW(5)
0003ec c005      	RJMP _0x51
                 ; 0000 0194     case 0b011 : key_code = 6; break;
                 _0x53:
0003ed 30e3      	CPI  R30,LOW(0x3)
0003ee e0a0      	LDI  R26,HIGH(0x3)
0003ef 07fa      	CPC  R31,R26
0003f0 f409      	BRNE _0x51
0003f1 e016      	LDI  R17,LOW(6)
                 ; 0000 0195     }
                 _0x51:
                 ; 0000 0196   }
                 ; 0000 0197 PORTC.5 = 1;
                 _0x4E:
0003f2 9aad      	SBI  0x15,5
                 ; 0000 0198 // third row
                 ; 0000 0199 PORTC.6 = 0;
0003f3 98ae      	CBI  0x15,6
                 ; 0000 019A columns = PINC & 0x07;
0003f4 940e 07a0 	CALL SUBOPT_0x1D
                 ; 0000 019B if(columns != 0x07)
0003f6 f081      	BREQ _0x59
                 ; 0000 019C   {
                 ; 0000 019D   switch(columns)
0003f7 940e 07a5 	CALL SUBOPT_0x1E
                 ; 0000 019E     {
                 ; 0000 019F     case 0b110 : key_code = 7; break;
0003f9 f411      	BRNE _0x5D
0003fa e017      	LDI  R17,LOW(7)
0003fb c00b      	RJMP _0x5C
                 ; 0000 01A0     case 0b101 : key_code = 8; break;
                 _0x5D:
0003fc 30e5      	CPI  R30,LOW(0x5)
0003fd e0a0      	LDI  R26,HIGH(0x5)
0003fe 07fa      	CPC  R31,R26
0003ff f411      	BRNE _0x5E
000400 e018      	LDI  R17,LOW(8)
000401 c005      	RJMP _0x5C
                 ; 0000 01A1     case 0b011 : key_code = 9; break;
                 _0x5E:
000402 30e3      	CPI  R30,LOW(0x3)
000403 e0a0      	LDI  R26,HIGH(0x3)
000404 07fa      	CPC  R31,R26
000405 f409      	BRNE _0x5C
000406 e019      	LDI  R17,LOW(9)
                 ; 0000 01A2     }
                 _0x5C:
                 ; 0000 01A3   }
                 ; 0000 01A4 PORTC.6 = 1;
                 _0x59:
000407 9aae      	SBI  0x15,6
                 ; 0000 01A5 // fourth row
                 ; 0000 01A6 PORTC.7 = 0;
000408 98af      	CBI  0x15,7
                 ; 0000 01A7 if(!PINC.1) key_code = 0;
000409 9b99      	SBIS 0x13,1
00040a e010      	LDI  R17,LOW(0)
                 ; 0000 01A8 PORTC.7 = 1;
00040b 9aaf      	SBI  0x15,7
                 ; 0000 01A9 
                 ; 0000 01AA PORTC = 0x0F;
00040c e0ef      	LDI  R30,LOW(15)
00040d bbe5      	OUT  0x15,R30
                 ; 0000 01AB return key_code;
00040e 2fe1      	MOV  R30,R17
00040f 9109      	LD   R16,Y+
000410 9119      	LD   R17,Y+
000411 9508      	RET
                 ; 0000 01AC }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
000412 93ba      	ST   -Y,R27
000413 93aa      	ST   -Y,R26
000414 931a      	ST   -Y,R17
000415 930a      	ST   -Y,R16
000416 81aa      	LDD  R26,Y+2
000417 81bb      	LDD  R27,Y+2+1
000418 9612      	ADIW R26,2
000419 940e 0830 	CALL __GETW1P
00041b 9730      	SBIW R30,0
00041c f159      	BREQ _0x2000010
00041d 81aa      	LDD  R26,Y+2
00041e 81bb      	LDD  R27,Y+2+1
00041f 9614      	ADIW R26,4
000420 940e 0830 	CALL __GETW1P
000422 018f      	MOVW R16,R30
000423 9730      	SBIW R30,0
000424 f061      	BREQ _0x2000012
                +
000425 3002     +CPI R16 , LOW ( 2 )
000426 e0e0     +LDI R30 , HIGH ( 2 )
000427 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000428 f098      	BRLO _0x2000013
000429 01f8      	MOVW R30,R16
00042a 9731      	SBIW R30,1
00042b 018f      	MOVW R16,R30
                +
00042c 81aa     +LDD R26 , Y + 2
00042d 81bb     +LDD R27 , Y + 2 + 1
00042e 9614     +ADIW R26 , 4
00042f 93ed     +ST X + , R30
000430 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
000431 81aa      	LDD  R26,Y+2
000432 81bb      	LDD  R27,Y+2+1
000433 9612      	ADIW R26,2
000434 91ed      	LD   R30,X+
000435 91fd      	LD   R31,X+
000436 9631      	ADIW R30,1
000437 93fe      	ST   -X,R31
000438 93ee      	ST   -X,R30
000439 9731      	SBIW R30,1
00043a 81ac      	LDD  R26,Y+4
00043b 83a0      	STD  Z+0,R26
                 _0x2000013:
00043c 81aa      	LDD  R26,Y+2
00043d 81bb      	LDD  R27,Y+2+1
00043e 940e 0830 	CALL __GETW1P
000440 23ff      	TST  R31
000441 f02a      	BRMI _0x2000014
000442 91ed      	LD   R30,X+
000443 91fd      	LD   R31,X+
000444 9631      	ADIW R30,1
000445 93fe      	ST   -X,R31
000446 93ee      	ST   -X,R30
                 _0x2000014:
000447 c006      	RJMP _0x2000015
                 _0x2000010:
000448 81aa      	LDD  R26,Y+2
000449 81bb      	LDD  R27,Y+2+1
00044a efef      	LDI  R30,LOW(65535)
00044b efff      	LDI  R31,HIGH(65535)
00044c 93ed      	ST   X+,R30
00044d 93fc      	ST   X,R31
                 _0x2000015:
00044e 8119      	LDD  R17,Y+1
00044f 8108      	LDD  R16,Y+0
000450 9625      	ADIW R28,5
000451 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000452 93ba      	ST   -Y,R27
000453 93aa      	ST   -Y,R26
000454 9726      	SBIW R28,6
000455 940e 083d 	CALL __SAVELOCR6
000457 e010      	LDI  R17,0
000458 85ac      	LDD  R26,Y+12
000459 85bd      	LDD  R27,Y+12+1
00045a e0e0      	LDI  R30,LOW(0)
00045b e0f0      	LDI  R31,HIGH(0)
00045c 93ed      	ST   X+,R30
00045d 93fc      	ST   X,R31
                 _0x2000016:
00045e 89ea      	LDD  R30,Y+18
00045f 89fb      	LDD  R31,Y+18+1
000460 9631      	ADIW R30,1
000461 8bea      	STD  Y+18,R30
000462 8bfb      	STD  Y+18+1,R31
000463 9731      	SBIW R30,1
000464 91e4      	LPM  R30,Z
000465 2f2e      	MOV  R18,R30
000466 30e0      	CPI  R30,0
000467 f409      	BRNE PC+2
000468 c115      	RJMP _0x2000018
000469 2fe1      	MOV  R30,R17
00046a 30e0      	CPI  R30,0
00046b f439      	BRNE _0x200001C
00046c 3225      	CPI  R18,37
00046d f411      	BRNE _0x200001D
00046e e011      	LDI  R17,LOW(1)
00046f c002      	RJMP _0x200001E
                 _0x200001D:
000470 940e 07ab 	CALL SUBOPT_0x1F
                 _0x200001E:
000472 c10a      	RJMP _0x200001B
                 _0x200001C:
000473 30e1      	CPI  R30,LOW(0x1)
000474 f4a9      	BRNE _0x200001F
000475 3225      	CPI  R18,37
000476 f419      	BRNE _0x2000020
000477 940e 07ab 	CALL SUBOPT_0x1F
000479 c102      	RJMP _0x20000CC
                 _0x2000020:
00047a e012      	LDI  R17,LOW(2)
00047b e040      	LDI  R20,LOW(0)
00047c e000      	LDI  R16,LOW(0)
00047d 322d      	CPI  R18,45
00047e f411      	BRNE _0x2000021
00047f e001      	LDI  R16,LOW(1)
000480 c0fc      	RJMP _0x200001B
                 _0x2000021:
000481 322b      	CPI  R18,43
000482 f411      	BRNE _0x2000022
000483 e24b      	LDI  R20,LOW(43)
000484 c0f8      	RJMP _0x200001B
                 _0x2000022:
000485 3220      	CPI  R18,32
000486 f411      	BRNE _0x2000023
000487 e240      	LDI  R20,LOW(32)
000488 c0f4      	RJMP _0x200001B
                 _0x2000023:
000489 c002      	RJMP _0x2000024
                 _0x200001F:
00048a 30e2      	CPI  R30,LOW(0x2)
00048b f439      	BRNE _0x2000025
                 _0x2000024:
00048c e050      	LDI  R21,LOW(0)
00048d e013      	LDI  R17,LOW(3)
00048e 3320      	CPI  R18,48
00048f f411      	BRNE _0x2000026
000490 6800      	ORI  R16,LOW(128)
000491 c0eb      	RJMP _0x200001B
                 _0x2000026:
000492 c003      	RJMP _0x2000027
                 _0x2000025:
000493 30e3      	CPI  R30,LOW(0x3)
000494 f009      	BREQ PC+2
000495 c0e7      	RJMP _0x200001B
                 _0x2000027:
000496 3320      	CPI  R18,48
000497 f010      	BRLO _0x200002A
000498 332a      	CPI  R18,58
000499 f008      	BRLO _0x200002B
                 _0x200002A:
00049a c007      	RJMP _0x2000029
                 _0x200002B:
00049b e0aa      	LDI  R26,LOW(10)
00049c 9f5a      	MUL  R21,R26
00049d 2d50      	MOV  R21,R0
00049e 2fe2      	MOV  R30,R18
00049f 53e0      	SUBI R30,LOW(48)
0004a0 0f5e      	ADD  R21,R30
0004a1 c0db      	RJMP _0x200001B
                 _0x2000029:
0004a2 2fe2      	MOV  R30,R18
0004a3 36e3      	CPI  R30,LOW(0x63)
0004a4 f449      	BRNE _0x200002F
0004a5 940e 07b2 	CALL SUBOPT_0x20
0004a7 89e8      	LDD  R30,Y+16
0004a8 89f9      	LDD  R31,Y+16+1
0004a9 81a4      	LDD  R26,Z+4
0004aa 93aa      	ST   -Y,R26
0004ab 940e 07b8 	CALL SUBOPT_0x21
0004ad c0ce      	RJMP _0x2000030
                 _0x200002F:
0004ae 37e3      	CPI  R30,LOW(0x73)
0004af f441      	BRNE _0x2000032
0004b0 940e 07b2 	CALL SUBOPT_0x20
0004b2 940e 07be 	CALL SUBOPT_0x22
0004b4 940e 05ba 	CALL _strlen
0004b6 2f1e      	MOV  R17,R30
0004b7 c00a      	RJMP _0x2000033
                 _0x2000032:
0004b8 37e0      	CPI  R30,LOW(0x70)
0004b9 f461      	BRNE _0x2000035
0004ba 940e 07b2 	CALL SUBOPT_0x20
0004bc 940e 07be 	CALL SUBOPT_0x22
0004be 940e 05c6 	CALL _strlenf
0004c0 2f1e      	MOV  R17,R30
0004c1 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0004c2 6002      	ORI  R16,LOW(2)
0004c3 770f      	ANDI R16,LOW(127)
0004c4 e030      	LDI  R19,LOW(0)
0004c5 c034      	RJMP _0x2000036
                 _0x2000035:
0004c6 36e4      	CPI  R30,LOW(0x64)
0004c7 f011      	BREQ _0x2000039
0004c8 36e9      	CPI  R30,LOW(0x69)
0004c9 f411      	BRNE _0x200003A
                 _0x2000039:
0004ca 6004      	ORI  R16,LOW(4)
0004cb c002      	RJMP _0x200003B
                 _0x200003A:
0004cc 37e5      	CPI  R30,LOW(0x75)
0004cd f431      	BRNE _0x200003C
                 _0x200003B:
0004ce e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0004cf e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0004d0 83ee      	STD  Y+6,R30
0004d1 83ff      	STD  Y+6+1,R31
0004d2 e015      	LDI  R17,LOW(5)
0004d3 c00c      	RJMP _0x200003D
                 _0x200003C:
0004d4 35e8      	CPI  R30,LOW(0x58)
0004d5 f411      	BRNE _0x200003F
0004d6 6008      	ORI  R16,LOW(8)
0004d7 c003      	RJMP _0x2000040
                 _0x200003F:
0004d8 37e8      	CPI  R30,LOW(0x78)
0004d9 f009      	BREQ PC+2
0004da c0a1      	RJMP _0x2000071
                 _0x2000040:
0004db e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0004dc e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0004dd 83ee      	STD  Y+6,R30
0004de 83ff      	STD  Y+6+1,R31
0004df e014      	LDI  R17,LOW(4)
                 _0x200003D:
0004e0 ff02      	SBRS R16,2
0004e1 c014      	RJMP _0x2000042
0004e2 940e 07b2 	CALL SUBOPT_0x20
0004e4 940e 07c8 	CALL SUBOPT_0x23
0004e6 85ab      	LDD  R26,Y+11
0004e7 23aa      	TST  R26
0004e8 f43a      	BRPL _0x2000043
0004e9 85ea      	LDD  R30,Y+10
0004ea 85fb      	LDD  R31,Y+10+1
0004eb 940e 07f3 	CALL __ANEGW1
0004ed 87ea      	STD  Y+10,R30
0004ee 87fb      	STD  Y+10+1,R31
0004ef e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0004f0 3040      	CPI  R20,0
0004f1 f011      	BREQ _0x2000044
0004f2 5f1f      	SUBI R17,-LOW(1)
0004f3 c001      	RJMP _0x2000045
                 _0x2000044:
0004f4 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0004f5 c004      	RJMP _0x2000046
                 _0x2000042:
0004f6 940e 07b2 	CALL SUBOPT_0x20
0004f8 940e 07c8 	CALL SUBOPT_0x23
                 _0x2000046:
                 _0x2000036:
0004fa fd00      	SBRC R16,0
0004fb c011      	RJMP _0x2000047
                 _0x2000048:
0004fc 1715      	CP   R17,R21
0004fd f478      	BRSH _0x200004A
0004fe ff07      	SBRS R16,7
0004ff c008      	RJMP _0x200004B
000500 ff02      	SBRS R16,2
000501 c004      	RJMP _0x200004C
000502 7f0b      	ANDI R16,LOW(251)
000503 2f24      	MOV  R18,R20
000504 5011      	SUBI R17,LOW(1)
000505 c001      	RJMP _0x200004D
                 _0x200004C:
000506 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000507 c001      	RJMP _0x200004E
                 _0x200004B:
000508 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000509 940e 07ab 	CALL SUBOPT_0x1F
00050b 5051      	SUBI R21,LOW(1)
00050c cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
00050d 2f31      	MOV  R19,R17
00050e ff01      	SBRS R16,1
00050f c017      	RJMP _0x200004F
                 _0x2000050:
000510 3030      	CPI  R19,0
000511 f0a1      	BREQ _0x2000052
000512 ff03      	SBRS R16,3
000513 c006      	RJMP _0x2000053
000514 81ee      	LDD  R30,Y+6
000515 81ff      	LDD  R31,Y+6+1
000516 9125      	LPM  R18,Z+
000517 83ee      	STD  Y+6,R30
000518 83ff      	STD  Y+6+1,R31
000519 c005      	RJMP _0x2000054
                 _0x2000053:
00051a 81ae      	LDD  R26,Y+6
00051b 81bf      	LDD  R27,Y+6+1
00051c 912d      	LD   R18,X+
00051d 83ae      	STD  Y+6,R26
00051e 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00051f 940e 07ab 	CALL SUBOPT_0x1F
000521 3050      	CPI  R21,0
000522 f009      	BREQ _0x2000055
000523 5051      	SUBI R21,LOW(1)
                 _0x2000055:
000524 5031      	SUBI R19,LOW(1)
000525 cfea      	RJMP _0x2000050
                 _0x2000052:
000526 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000527 e320      	LDI  R18,LOW(48)
000528 81ee      	LDD  R30,Y+6
000529 81ff      	LDD  R31,Y+6+1
00052a 940e 0834 	CALL __GETW1PF
00052c 87e8      	STD  Y+8,R30
00052d 87f9      	STD  Y+8+1,R31
00052e 81ee      	LDD  R30,Y+6
00052f 81ff      	LDD  R31,Y+6+1
000530 9632      	ADIW R30,2
000531 83ee      	STD  Y+6,R30
000532 83ff      	STD  Y+6+1,R31
                 _0x200005A:
000533 85e8      	LDD  R30,Y+8
000534 85f9      	LDD  R31,Y+8+1
000535 85aa      	LDD  R26,Y+10
000536 85bb      	LDD  R27,Y+10+1
000537 17ae      	CP   R26,R30
000538 07bf      	CPC  R27,R31
000539 f050      	BRLO _0x200005C
00053a 5f2f      	SUBI R18,-LOW(1)
00053b 85a8      	LDD  R26,Y+8
00053c 85b9      	LDD  R27,Y+8+1
00053d 85ea      	LDD  R30,Y+10
00053e 85fb      	LDD  R31,Y+10+1
00053f 1bea      	SUB  R30,R26
000540 0bfb      	SBC  R31,R27
000541 87ea      	STD  Y+10,R30
000542 87fb      	STD  Y+10+1,R31
000543 cfef      	RJMP _0x200005A
                 _0x200005C:
000544 332a      	CPI  R18,58
000545 f028      	BRLO _0x200005D
000546 ff03      	SBRS R16,3
000547 c002      	RJMP _0x200005E
000548 5f29      	SUBI R18,-LOW(7)
000549 c001      	RJMP _0x200005F
                 _0x200005E:
00054a 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00054b fd04      	SBRC R16,4
00054c c01a      	RJMP _0x2000061
00054d 3321      	CPI  R18,49
00054e f420      	BRSH _0x2000063
00054f 85a8      	LDD  R26,Y+8
000550 85b9      	LDD  R27,Y+8+1
000551 9711      	SBIW R26,1
000552 f409      	BRNE _0x2000062
                 _0x2000063:
000553 c009      	RJMP _0x20000CD
                 _0x2000062:
000554 1753      	CP   R21,R19
000555 f010      	BRLO _0x2000067
000556 ff00      	SBRS R16,0
000557 c001      	RJMP _0x2000068
                 _0x2000067:
000558 c013      	RJMP _0x2000066
                 _0x2000068:
000559 e220      	LDI  R18,LOW(32)
00055a ff07      	SBRS R16,7
00055b c00b      	RJMP _0x2000069
00055c e320      	LDI  R18,LOW(48)
                 _0x20000CD:
00055d 6100      	ORI  R16,LOW(16)
00055e ff02      	SBRS R16,2
00055f c007      	RJMP _0x200006A
000560 7f0b      	ANDI R16,LOW(251)
000561 934a      	ST   -Y,R20
000562 940e 07b8 	CALL SUBOPT_0x21
000564 3050      	CPI  R21,0
000565 f009      	BREQ _0x200006B
000566 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000567 940e 07ab 	CALL SUBOPT_0x1F
000569 3050      	CPI  R21,0
00056a f009      	BREQ _0x200006C
00056b 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00056c 5031      	SUBI R19,LOW(1)
00056d 85a8      	LDD  R26,Y+8
00056e 85b9      	LDD  R27,Y+8+1
00056f 9712      	SBIW R26,2
000570 f008      	BRLO _0x2000059
000571 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000572 ff00      	SBRS R16,0
000573 c008      	RJMP _0x200006D
                 _0x200006E:
000574 3050      	CPI  R21,0
000575 f031      	BREQ _0x2000070
000576 5051      	SUBI R21,LOW(1)
000577 e2e0      	LDI  R30,LOW(32)
000578 93ea      	ST   -Y,R30
000579 940e 07b8 	CALL SUBOPT_0x21
00057b cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00057c e010      	LDI  R17,LOW(0)
                 _0x200001B:
00057d cee0      	RJMP _0x2000016
                 _0x2000018:
00057e 85ac      	LDD  R26,Y+12
00057f 85bd      	LDD  R27,Y+12+1
000580 940e 0830 	CALL __GETW1P
000582 940e 0844 	CALL __LOADLOCR6
000584 9664      	ADIW R28,20
000585 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000586 92ff      	PUSH R15
000587 2ef8      	MOV  R15,R24
000588 9726      	SBIW R28,6
000589 940e 083f 	CALL __SAVELOCR4
00058b 940e 07d0 	CALL SUBOPT_0x24
00058d 9730      	SBIW R30,0
00058e f419      	BRNE _0x2000072
00058f efef      	LDI  R30,LOW(65535)
000590 efff      	LDI  R31,HIGH(65535)
000591 c023      	RJMP _0x20C0004
                 _0x2000072:
000592 01de      	MOVW R26,R28
000593 9616      	ADIW R26,6
000594 940e 07ef 	CALL __ADDW2R15
000596 018d      	MOVW R16,R26
000597 940e 07d0 	CALL SUBOPT_0x24
000599 83ee      	STD  Y+6,R30
00059a 83ff      	STD  Y+6+1,R31
00059b e0e0      	LDI  R30,LOW(0)
00059c 87e8      	STD  Y+8,R30
00059d 87e9      	STD  Y+8+1,R30
00059e 01de      	MOVW R26,R28
00059f 961a      	ADIW R26,10
0005a0 940e 07ef 	CALL __ADDW2R15
0005a2 940e 0830 	CALL __GETW1P
0005a4 93fa      	ST   -Y,R31
0005a5 93ea      	ST   -Y,R30
0005a6 931a      	ST   -Y,R17
0005a7 930a      	ST   -Y,R16
0005a8 e1e2      	LDI  R30,LOW(_put_buff_G100)
0005a9 e0f4      	LDI  R31,HIGH(_put_buff_G100)
0005aa 93fa      	ST   -Y,R31
0005ab 93ea      	ST   -Y,R30
0005ac 01de      	MOVW R26,R28
0005ad 961a      	ADIW R26,10
0005ae dea3      	RCALL __print_G100
0005af 019f      	MOVW R18,R30
0005b0 81ae      	LDD  R26,Y+6
0005b1 81bf      	LDD  R27,Y+6+1
0005b2 e0e0      	LDI  R30,LOW(0)
0005b3 93ec      	ST   X,R30
0005b4 01f9      	MOVW R30,R18
                 _0x20C0004:
0005b5 940e 0846 	CALL __LOADLOCR4
0005b7 962a      	ADIW R28,10
0005b8 90ff      	POP  R15
0005b9 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
0005ba 93ba      	ST   -Y,R27
0005bb 93aa      	ST   -Y,R26
0005bc 91a9          ld   r26,y+
0005bd 91b9          ld   r27,y+
0005be 27ee          clr  r30
0005bf 27ff          clr  r31
                 strlen0:
0005c0 916d          ld   r22,x+
0005c1 2366          tst  r22
0005c2 f011          breq strlen1
0005c3 9631          adiw r30,1
0005c4 cffb          rjmp strlen0
                 strlen1:
0005c5 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
0005c6 93ba      	ST   -Y,R27
0005c7 93aa      	ST   -Y,R26
0005c8 27aa          clr  r26
0005c9 27bb          clr  r27
0005ca 91e9          ld   r30,y+
0005cb 91f9          ld   r31,y+
                 strlenf0:
0005cc 9005      	lpm  r0,z+
0005cd 2000          tst  r0
0005ce f011          breq strlenf1
0005cf 9611          adiw r26,1
0005d0 cffb          rjmp strlenf0
                 strlenf1:
0005d1 01fd          movw r30,r26
0005d2 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0005d3 93ba      	ST   -Y,R27
0005d4 93aa      	ST   -Y,R26
0005d5 91a9          ld   r26,y+
0005d6 91b9          ld   r27,y+
0005d7 91e9          ld   r30,y+
0005d8 91f9          ld   r31,y+
0005d9 9630          adiw r30,0
0005da f42a          brpl __itoa0
0005db 95e0          com  r30
0005dc 95f0          com  r31
0005dd 9631          adiw r30,1
0005de e26d          ldi  r22,'-'
0005df 936d          st   x+,r22
                 __itoa0:
0005e0 94e8          clt
0005e1 e180          ldi  r24,low(10000)
0005e2 e297          ldi  r25,high(10000)
0005e3 d00d          rcall __itoa1
0005e4 ee88          ldi  r24,low(1000)
0005e5 e093          ldi  r25,high(1000)
0005e6 d00a          rcall __itoa1
0005e7 e684          ldi  r24,100
0005e8 2799          clr  r25
0005e9 d007          rcall __itoa1
0005ea e08a          ldi  r24,10
0005eb d005          rcall __itoa1
0005ec 2f6e          mov  r22,r30
0005ed d010          rcall __itoa5
0005ee 2766          clr  r22
0005ef 936c          st   x,r22
0005f0 9508          ret
                 
                 __itoa1:
0005f1 2766          clr	 r22
                 __itoa2:
0005f2 17e8          cp   r30,r24
0005f3 07f9          cpc  r31,r25
0005f4 f020          brlo __itoa3
0005f5 9563          inc  r22
0005f6 1be8          sub  r30,r24
0005f7 0bf9          sbc  r31,r25
0005f8 f7c9          brne __itoa2
                 __itoa3:
0005f9 2366          tst  r22
0005fa f411          brne __itoa4
0005fb f016          brts __itoa5
0005fc 9508          ret
                 __itoa4:
0005fd 9468          set
                 __itoa5:
0005fe 5d60          subi r22,-0x30
0005ff 936d          st   x+,r22
000600 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
000601 93aa      	ST   -Y,R26
000602 b3e8      	IN   R30,0x18
000603 70ef      	ANDI R30,LOW(0xF)
000604 2fae      	MOV  R26,R30
000605 81e8      	LD   R30,Y
000606 7fe0      	ANDI R30,LOW(0xF0)
000607 2bea      	OR   R30,R26
000608 bbe8      	OUT  0x18,R30
                +
000609 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00060a 958a     +DEC R24
00060b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00060c 9ac2      	SBI  0x18,2
                +
00060d e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00060e 958a     +DEC R24
00060f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000610 98c2      	CBI  0x18,2
                +
000611 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000612 958a     +DEC R24
000613 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000614 c09a      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000615 93aa      	ST   -Y,R26
000616 81a8      	LD   R26,Y
000617 dfe9      	RCALL __lcd_write_nibble_G103
000618 81e8          ld    r30,y
000619 95e2          swap  r30
00061a 83e8          st    y,r30
00061b 81a8      	LD   R26,Y
00061c dfe4      	RCALL __lcd_write_nibble_G103
                +
00061d e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00061e 958a     +DEC R24
00061f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000620 c08e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000621 93aa      	ST   -Y,R26
000622 81e8      	LD   R30,Y
000623 e0f0      	LDI  R31,0
000624 53e8      	SUBI R30,LOW(-__base_y_G103)
000625 4ffd      	SBCI R31,HIGH(-__base_y_G103)
000626 81e0      	LD   R30,Z
000627 81a9      	LDD  R26,Y+1
000628 0fae      	ADD  R26,R30
000629 dfeb      	RCALL __lcd_write_data
00062a 81e9      	LDD  R30,Y+1
00062b 93e0 02cc 	STS  __lcd_x,R30
00062d 81e8      	LD   R30,Y
00062e 93e0 02cd 	STS  __lcd_y,R30
                 _0x20C0003:
000630 9622      	ADIW R28,2
000631 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000632 e0a2      	LDI  R26,LOW(2)
000633 940e 07d7 	CALL SUBOPT_0x25
000635 e0ac      	LDI  R26,LOW(12)
000636 dfde      	RCALL __lcd_write_data
000637 e0a1      	LDI  R26,LOW(1)
000638 940e 07d7 	CALL SUBOPT_0x25
00063a e0e0      	LDI  R30,LOW(0)
00063b 93e0 02cd 	STS  __lcd_y,R30
00063d 93e0 02cc 	STS  __lcd_x,R30
00063f 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000640 93aa      	ST   -Y,R26
000641 81a8      	LD   R26,Y
000642 30aa      	CPI  R26,LOW(0xA)
000643 f031      	BREQ _0x2060005
000644 91e0 02ce 	LDS  R30,__lcd_maxx
000646 91a0 02cc 	LDS  R26,__lcd_x
000648 17ae      	CP   R26,R30
000649 f060      	BRLO _0x2060004
                 _0x2060005:
00064a e0e0      	LDI  R30,LOW(0)
00064b 93ea      	ST   -Y,R30
00064c 91a0 02cd 	LDS  R26,__lcd_y
00064e 5faf      	SUBI R26,-LOW(1)
00064f 93a0 02cd 	STS  __lcd_y,R26
000651 dfcf      	RCALL _lcd_gotoxy
000652 81a8      	LD   R26,Y
000653 30aa      	CPI  R26,LOW(0xA)
000654 f409      	BRNE _0x2060007
000655 c059      	RJMP _0x20C0001
                 _0x2060007:
                 _0x2060004:
000656 91e0 02cc 	LDS  R30,__lcd_x
000658 5fef      	SUBI R30,-LOW(1)
000659 93e0 02cc 	STS  __lcd_x,R30
00065b 9ac0      	SBI  0x18,0
00065c 81a8      	LD   R26,Y
00065d dfb7      	RCALL __lcd_write_data
00065e 98c0      	CBI  0x18,0
00065f c04f      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000660 93ba      	ST   -Y,R27
000661 93aa      	ST   -Y,R26
000662 931a      	ST   -Y,R17
                 _0x2060008:
000663 81a9      	LDD  R26,Y+1
000664 81ba      	LDD  R27,Y+1+1
000665 91ed      	LD   R30,X+
000666 83a9      	STD  Y+1,R26
000667 83ba      	STD  Y+1+1,R27
000668 2f1e      	MOV  R17,R30
000669 30e0      	CPI  R30,0
00066a f019      	BREQ _0x206000A
00066b 2fa1      	MOV  R26,R17
00066c dfd3      	RCALL _lcd_putchar
00066d cff5      	RJMP _0x2060008
                 _0x206000A:
00066e c010      	RJMP _0x20C0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00066f 93ba      	ST   -Y,R27
000670 93aa      	ST   -Y,R26
000671 931a      	ST   -Y,R17
                 _0x206000B:
000672 81e9      	LDD  R30,Y+1
000673 81fa      	LDD  R31,Y+1+1
000674 9631      	ADIW R30,1
000675 83e9      	STD  Y+1,R30
000676 83fa      	STD  Y+1+1,R31
000677 9731      	SBIW R30,1
000678 91e4      	LPM  R30,Z
000679 2f1e      	MOV  R17,R30
00067a 30e0      	CPI  R30,0
00067b f019      	BREQ _0x206000D
00067c 2fa1      	MOV  R26,R17
00067d dfc2      	RCALL _lcd_putchar
00067e cff3      	RJMP _0x206000B
                 _0x206000D:
                 _0x20C0002:
00067f 8118      	LDD  R17,Y+0
000680 9623      	ADIW R28,3
000681 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000682 93aa      	ST   -Y,R26
000683 b3e7      	IN   R30,0x17
000684 6fe0      	ORI  R30,LOW(0xF0)
000685 bbe7      	OUT  0x17,R30
000686 9aba      	SBI  0x17,2
000687 9ab8      	SBI  0x17,0
000688 9ab9      	SBI  0x17,1
000689 98c2      	CBI  0x18,2
00068a 98c0      	CBI  0x18,0
00068b 98c1      	CBI  0x18,1
00068c 81e8      	LD   R30,Y
00068d 93e0 02ce 	STS  __lcd_maxx,R30
00068f 58e0      	SUBI R30,-LOW(128)
                +
000690 93e0 02ca+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000692 81e8      	LD   R30,Y
000693 54e0      	SUBI R30,-LOW(192)
                +
000694 93e0 02cb+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000696 e1a4      	LDI  R26,LOW(20)
000697 e0b0      	LDI  R27,0
000698 940e 07e5 	CALL _delay_ms
00069a 940e 07dd 	CALL SUBOPT_0x26
00069c 940e 07dd 	CALL SUBOPT_0x26
00069e 940e 07dd 	CALL SUBOPT_0x26
0006a0 e2a0      	LDI  R26,LOW(32)
0006a1 df5f      	RCALL __lcd_write_nibble_G103
                +
0006a2 ec88     +LDI R24 , LOW ( 200 )
0006a3 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0006a4 9701     +SBIW R24 , 1
0006a5 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0006a6 e2a8      	LDI  R26,LOW(40)
0006a7 df6d      	RCALL __lcd_write_data
0006a8 e0a4      	LDI  R26,LOW(4)
0006a9 df6b      	RCALL __lcd_write_data
0006aa e8a5      	LDI  R26,LOW(133)
0006ab df69      	RCALL __lcd_write_data
0006ac e0a6      	LDI  R26,LOW(6)
0006ad df67      	RCALL __lcd_write_data
0006ae df83      	RCALL _lcd_clear
                 _0x20C0001:
0006af 9621      	ADIW R28,1
0006b0 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _totalcount6:
000260           	.BYTE 0x2
                 _nobat6:
000262           	.BYTE 0x2
                 _totalcount7:
000264           	.BYTE 0x2
                 _nobat7:
000266           	.BYTE 0x2
                 _TotalCount:
000268           	.BYTE 0x2
                 _badje1:
00026a           	.BYTE 0x2
                 _badje2:
00026c           	.BYTE 0x2
                 _badje3:
00026e           	.BYTE 0x2
                 _badje4:
000270           	.BYTE 0x2
                 _badje5:
000272           	.BYTE 0x2
                 _badje6:
000274           	.BYTE 0x2
                 _badje7:
000276           	.BYTE 0x2
                 _namayesh:
000278           	.BYTE 0x2
                 _d1:
00027a           	.BYTE 0x2
                 _d2:
00027c           	.BYTE 0x2
                 _d3:
00027e           	.BYTE 0x2
                 _d4:
000280           	.BYTE 0x2
                 _d5:
000282           	.BYTE 0x2
                 _d6:
000284           	.BYTE 0x2
                 _d7:
000286           	.BYTE 0x2
                 _entezar:
000288           	.BYTE 0x2
                 _str2:
00028a           	.BYTE 0xA
                 _str3:
000294           	.BYTE 0x11
                 _reset:
0002a5           	.BYTE 0x2
                 _saat_yekonim:
0002a7           	.BYTE 0x2
                 _str1:
0002a9           	.BYTE 0xA
                 _lcd_buffer:
0002b3           	.BYTE 0x11
                 __seed_G102:
0002c4           	.BYTE 0x4
                 __base_y_G103:
0002c8           	.BYTE 0x4
                 __lcd_x:
0002cc           	.BYTE 0x1
                 __lcd_y:
0002cd           	.BYTE 0x1
                 __lcd_maxx:
0002ce           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
0006b1 91e0 02a7 	LDS  R30,_saat_yekonim
0006b3 91f0 02a8 	LDS  R31,_saat_yekonim+1
0006b5 9730      	SBIW R30,0
0006b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
0006b7 91e0 0268 	LDS  R30,_TotalCount
0006b9 91f0 0269 	LDS  R31,_TotalCount+1
0006bb 9631      	ADIW R30,1
0006bc 93e0 0268 	STS  _TotalCount,R30
0006be 93f0 0269 	STS  _TotalCount+1,R31
0006c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
0006c1 e0e1      	LDI  R30,LOW(1)
0006c2 e0f0      	LDI  R31,HIGH(1)
0006c3 93e0 026a 	STS  _badje1,R30
0006c5 93f0 026b 	STS  _badje1+1,R31
0006c7 01f6      	MOVW R30,R12
0006c8 9631      	ADIW R30,1
0006c9 016f      	MOVW R12,R30
0006ca 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x3:
0006cb e0e1      	LDI  R30,LOW(1)
0006cc e0f0      	LDI  R31,HIGH(1)
0006cd 93e0 0278 	STS  _namayesh,R30
0006cf 93f0 0279 	STS  _namayesh+1,R31
0006d1 92da      	ST   -Y,R13
0006d2 92ca      	ST   -Y,R12
0006d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0006d4 e0e1      	LDI  R30,LOW(1)
0006d5 e0f0      	LDI  R31,HIGH(1)
0006d6 93e0 026c 	STS  _badje2,R30
0006d8 93f0 026d 	STS  _badje2+1,R31
0006da 01f6      	MOVW R30,R12
0006db 9631      	ADIW R30,1
0006dc 016f      	MOVW R12,R30
0006dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0006de e0e1      	LDI  R30,LOW(1)
0006df e0f0      	LDI  R31,HIGH(1)
0006e0 93e0 026e 	STS  _badje3,R30
0006e2 93f0 026f 	STS  _badje3+1,R31
0006e4 01f6      	MOVW R30,R12
0006e5 9631      	ADIW R30,1
0006e6 016f      	MOVW R12,R30
0006e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x6:
0006e8 e0e1      	LDI  R30,LOW(1)
0006e9 e0f0      	LDI  R31,HIGH(1)
0006ea 93e0 0270 	STS  _badje4,R30
0006ec 93f0 0271 	STS  _badje4+1,R31
0006ee 01f6      	MOVW R30,R12
0006ef 9631      	ADIW R30,1
0006f0 016f      	MOVW R12,R30
0006f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0006f2 e0e1      	LDI  R30,LOW(1)
0006f3 e0f0      	LDI  R31,HIGH(1)
0006f4 93e0 0272 	STS  _badje5,R30
0006f6 93f0 0273 	STS  _badje5+1,R31
0006f8 01f6      	MOVW R30,R12
0006f9 9631      	ADIW R30,1
0006fa 016f      	MOVW R12,R30
0006fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 10 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x8:
0006fc e0e1      	LDI  R30,LOW(1)
0006fd e0f0      	LDI  R31,HIGH(1)
0006fe 93e0 0278 	STS  _namayesh,R30
000700 93f0 0279 	STS  _namayesh+1,R31
000702 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 12 TIMES, CODE SIZE REDUCTION:19 WORDS
                 SUBOPT_0x9:
000703 93e0 0278 	STS  _namayesh,R30
000705 93e0 0279 	STS  _namayesh+1,R30
000707 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
000708 e0e1      	LDI  R30,LOW(1)
000709 e0f0      	LDI  R31,HIGH(1)
00070a 93e0 0274 	STS  _badje6,R30
00070c 93f0 0275 	STS  _badje6+1,R31
00070e 91e0 0262 	LDS  R30,_nobat6
000710 91f0 0263 	LDS  R31,_nobat6+1
000712 9631      	ADIW R30,1
000713 93e0 0262 	STS  _nobat6,R30
000715 93f0 0263 	STS  _nobat6+1,R31
000717 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000718 91e0 0262 	LDS  R30,_nobat6
00071a 91f0 0263 	LDS  R31,_nobat6+1
00071c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
00071d 93fa      	ST   -Y,R31
00071e 93ea      	ST   -Y,R30
00071f e0a6      	LDI  R26,LOW(6)
000720 e0b0      	LDI  R27,0
000721 940c 0373 	JMP  _LCD_namayesh_go_to_badje
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000723 1bea      	SUB  R30,R26
000724 0bfb      	SBC  R31,R27
000725 83e8      	ST   Y,R30
000726 83f9      	STD  Y+1,R31
000727 81a8      	LD   R26,Y
000728 81b9      	LDD  R27,Y+1
000729 940e 03a1 	CALL _LCD_namayesh_entezar
00072b 9622      	ADIW R28,2
00072c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xE:
00072d e0e1      	LDI  R30,LOW(1)
00072e e0f0      	LDI  R31,HIGH(1)
00072f 93e0 0276 	STS  _badje7,R30
000731 93f0 0277 	STS  _badje7+1,R31
000733 91e0 0266 	LDS  R30,_nobat7
000735 91f0 0267 	LDS  R31,_nobat7+1
000737 9631      	ADIW R30,1
000738 93e0 0266 	STS  _nobat7,R30
00073a 93f0 0267 	STS  _nobat7+1,R31
00073c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00073d 91e0 0266 	LDS  R30,_nobat7
00073f 91f0 0267 	LDS  R31,_nobat7+1
000741 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000742 93fa      	ST   -Y,R31
000743 93ea      	ST   -Y,R30
000744 e0a7      	LDI  R26,LOW(7)
000745 e0b0      	LDI  R27,0
000746 940c 0373 	JMP  _LCD_namayesh_go_to_badje
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x11:
000748 e0e0      	LDI  R30,LOW(0)
000749 93e0 026a 	STS  _badje1,R30
00074b 93e0 026b 	STS  _badje1+1,R30
00074d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x12:
00074e e0e0      	LDI  R30,LOW(0)
00074f 93e0 026c 	STS  _badje2,R30
000751 93e0 026d 	STS  _badje2+1,R30
000753 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
000754 e0e0      	LDI  R30,LOW(0)
000755 93e0 026e 	STS  _badje3,R30
000757 93e0 026f 	STS  _badje3+1,R30
000759 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
00075a e0e0      	LDI  R30,LOW(0)
00075b 93e0 0270 	STS  _badje4,R30
00075d 93e0 0271 	STS  _badje4+1,R30
00075f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000760 e0e0      	LDI  R30,LOW(0)
000761 93e0 0272 	STS  _badje5,R30
000763 93e0 0273 	STS  _badje5+1,R30
000765 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x16:
000766 e0e0      	LDI  R30,LOW(0)
000767 93e0 0274 	STS  _badje6,R30
000769 93e0 0275 	STS  _badje6+1,R30
00076b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x17:
00076c e0e0      	LDI  R30,LOW(0)
00076d 93e0 0276 	STS  _badje7,R30
00076f 93e0 0277 	STS  _badje7+1,R30
000771 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:26 WORDS
                 SUBOPT_0x18:
000772 24aa      	CLR  R10
000773 24bb      	CLR  R11
000774 24cc      	CLR  R12
000775 24dd      	CLR  R13
000776 e0e0      	LDI  R30,LOW(0)
000777 93e0 0260 	STS  _totalcount6,R30
000779 93e0 0261 	STS  _totalcount6+1,R30
00077b 93e0 0262 	STS  _nobat6,R30
00077d 93e0 0263 	STS  _nobat6+1,R30
00077f 93e0 0264 	STS  _totalcount7,R30
000781 93e0 0265 	STS  _totalcount7+1,R30
000783 93e0 0266 	STS  _nobat7,R30
000785 93e0 0267 	STS  _nobat7+1,R30
000787 93e0 0268 	STS  _TotalCount,R30
000789 93e0 0269 	STS  _TotalCount+1,R30
00078b cfbc      	RJMP SUBOPT_0x11
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x19:
00078c 940e 07f7 	CALL __CWD1
00078e 940e 0838 	CALL __PUTPARD1
000790 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1A:
000791 e0e0      	LDI  R30,LOW(0)
000792 93ea      	ST   -Y,R30
000793 e0a0      	LDI  R26,LOW(0)
000794 940c 0621 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
000796 940e 0660 	CALL _lcd_puts
000798 eea8      	LDI  R26,LOW(1000)
000799 e0b3      	LDI  R27,HIGH(1000)
00079a 940c 07e5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
00079c 93ea      	ST   -Y,R30
00079d e0a0      	LDI  R26,LOW(0)
00079e 940c 0621 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1D:
0007a0 b3e3      	IN   R30,0x13
0007a1 70e7      	ANDI R30,LOW(0x7)
0007a2 2f0e      	MOV  R16,R30
0007a3 3007      	CPI  R16,7
0007a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1E:
0007a5 2fe0      	MOV  R30,R16
0007a6 e0f0      	LDI  R31,0
0007a7 30e6      	CPI  R30,LOW(0x6)
0007a8 e0a0      	LDI  R26,HIGH(0x6)
0007a9 07fa      	CPC  R31,R26
0007aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1F:
0007ab 932a      	ST   -Y,R18
0007ac 85ad      	LDD  R26,Y+13
0007ad 85be      	LDD  R27,Y+13+1
0007ae 85ef      	LDD  R30,Y+15
0007af 89f8      	LDD  R31,Y+15+1
0007b0 9509      	ICALL
0007b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x20:
0007b2 89e8      	LDD  R30,Y+16
0007b3 89f9      	LDD  R31,Y+16+1
0007b4 9734      	SBIW R30,4
0007b5 8be8      	STD  Y+16,R30
0007b6 8bf9      	STD  Y+16+1,R31
0007b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x21:
0007b8 85ad      	LDD  R26,Y+13
0007b9 85be      	LDD  R27,Y+13+1
0007ba 85ef      	LDD  R30,Y+15
0007bb 89f8      	LDD  R31,Y+15+1
0007bc 9509      	ICALL
0007bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x22:
0007be 89a8      	LDD  R26,Y+16
0007bf 89b9      	LDD  R27,Y+16+1
0007c0 9614      	ADIW R26,4
0007c1 940e 0830 	CALL __GETW1P
0007c3 83ee      	STD  Y+6,R30
0007c4 83ff      	STD  Y+6+1,R31
0007c5 81ae      	LDD  R26,Y+6
0007c6 81bf      	LDD  R27,Y+6+1
0007c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x23:
0007c8 89a8      	LDD  R26,Y+16
0007c9 89b9      	LDD  R27,Y+16+1
0007ca 9614      	ADIW R26,4
0007cb 940e 0830 	CALL __GETW1P
0007cd 87ea      	STD  Y+10,R30
0007ce 87fb      	STD  Y+10+1,R31
0007cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x24:
0007d0 01de      	MOVW R26,R28
0007d1 961c      	ADIW R26,12
0007d2 940e 07ef 	CALL __ADDW2R15
0007d4 940e 0830 	CALL __GETW1P
0007d6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x25:
0007d7 940e 0615 	CALL __lcd_write_data
0007d9 e0a3      	LDI  R26,LOW(3)
0007da e0b0      	LDI  R27,0
0007db 940c 07e5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x26:
0007dd e3a0      	LDI  R26,LOW(48)
0007de 940e 0601 	CALL __lcd_write_nibble_G103
                +
0007e0 ec88     +LDI R24 , LOW ( 200 )
0007e1 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0007e2 9701     +SBIW R24 , 1
0007e3 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0007e4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0007e5 9610      	adiw r26,0
0007e6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0007e7 ed80     +LDI R24 , LOW ( 0x7D0 )
0007e8 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0007e9 9701     +SBIW R24 , 1
0007ea f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0007eb 95a8      	wdr
0007ec 9711      	sbiw r26,1
0007ed f7c9      	brne __delay_ms0
                 __delay_ms1:
0007ee 9508      	ret
                 
                 __ADDW2R15:
0007ef 2400      	CLR  R0
0007f0 0daf      	ADD  R26,R15
0007f1 1db0      	ADC  R27,R0
0007f2 9508      	RET
                 
                 __ANEGW1:
0007f3 95f1      	NEG  R31
0007f4 95e1      	NEG  R30
0007f5 40f0      	SBCI R31,0
0007f6 9508      	RET
                 
                 __CWD1:
0007f7 2f6f      	MOV  R22,R31
0007f8 0f66      	ADD  R22,R22
0007f9 0b66      	SBC  R22,R22
0007fa 2f76      	MOV  R23,R22
0007fb 9508      	RET
                 
                 __DIVW21U:
0007fc 2400      	CLR  R0
0007fd 2411      	CLR  R1
0007fe e190      	LDI  R25,16
                 __DIVW21U1:
0007ff 0faa      	LSL  R26
000800 1fbb      	ROL  R27
000801 1c00      	ROL  R0
000802 1c11      	ROL  R1
000803 1a0e      	SUB  R0,R30
000804 0a1f      	SBC  R1,R31
000805 f418      	BRCC __DIVW21U2
000806 0e0e      	ADD  R0,R30
000807 1e1f      	ADC  R1,R31
000808 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000809 60a1      	SBR  R26,1
                 __DIVW21U3:
00080a 959a      	DEC  R25
00080b f799      	BRNE __DIVW21U1
00080c 01fd      	MOVW R30,R26
00080d 01d0      	MOVW R26,R0
00080e 9508      	RET
                 
                 __DIVW21:
00080f d012      	RCALL __CHKSIGNW
000810 dfeb      	RCALL __DIVW21U
000811 f40e      	BRTC __DIVW211
000812 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000813 9508      	RET
                 
                 __MODW21:
000814 94e8      	CLT
000815 ffb7      	SBRS R27,7
000816 c004      	RJMP __MODW211
000817 95a0      	COM  R26
000818 95b0      	COM  R27
000819 9611      	ADIW R26,1
00081a 9468      	SET
                 __MODW211:
00081b fdf7      	SBRC R31,7
00081c dfd6      	RCALL __ANEGW1
00081d dfde      	RCALL __DIVW21U
00081e 01fd      	MOVW R30,R26
00081f f40e      	BRTC __MODW212
000820 dfd2      	RCALL __ANEGW1
                 __MODW212:
000821 9508      	RET
                 
                 __CHKSIGNW:
000822 94e8      	CLT
000823 fff7      	SBRS R31,7
000824 c002      	RJMP __CHKSW1
000825 dfcd      	RCALL __ANEGW1
000826 9468      	SET
                 __CHKSW1:
000827 ffb7      	SBRS R27,7
000828 c006      	RJMP __CHKSW2
000829 95a0      	COM  R26
00082a 95b0      	COM  R27
00082b 9611      	ADIW R26,1
00082c f800      	BLD  R0,0
00082d 9403      	INC  R0
00082e fa00      	BST  R0,0
                 __CHKSW2:
00082f 9508      	RET
                 
                 __GETW1P:
000830 91ed      	LD   R30,X+
000831 91fc      	LD   R31,X
000832 9711      	SBIW R26,1
000833 9508      	RET
                 
                 __GETW1PF:
000834 9005      	LPM  R0,Z+
000835 91f4      	LPM  R31,Z
000836 2de0      	MOV  R30,R0
000837 9508      	RET
                 
                 __PUTPARD1:
000838 937a      	ST   -Y,R23
000839 936a      	ST   -Y,R22
00083a 93fa      	ST   -Y,R31
00083b 93ea      	ST   -Y,R30
00083c 9508      	RET
                 
                 __SAVELOCR6:
00083d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00083e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00083f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000840 932a      	ST   -Y,R18
                 __SAVELOCR2:
000841 931a      	ST   -Y,R17
000842 930a      	ST   -Y,R16
000843 9508      	RET
                 
                 __LOADLOCR6:
000844 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000845 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000846 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000847 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000848 8119      	LDD  R17,Y+1
000849 8108      	LD   R16,Y
00084a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  21 r1 :   7 r2 :   0 r3 :   0 r4 :   6 r5 :   3 r6 :   6 r7 :   3 
r8 :   9 r9 :   6 r10:   9 r11:   6 r12:  23 r13:   8 r14:   0 r15:   6 
r16:  45 r17:  52 r18:  29 r19:  11 r20:   9 r21:  17 r22:  23 r23:   4 
r24:  31 r25:  14 r26: 193 r27:  91 r28:  19 r29:   1 r30: 480 r31: 192 
x  :  35 y  : 278 z  :  16 
Registers used: 32 out of 35 (91.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   6 
adiw  :  53 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  26 
brge  :   8 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   1 brne  :  65 brpl  :   2 brsh  :   2 brtc  :   2 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 167 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  26 cls   :   0 clt   :   3 clv   :   0 clz   :   0 com   :   6 
cp    :  20 cpc   :  34 cpi   :  54 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   7 inc   :   2 jmp   :  29 ld    :  54 ldd   :  97 ldi   : 261 
lds   :  52 lpm   :  16 lsl   :   1 lsr   :   0 mov   :  34 movw  :  44 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   9 out   :  33 pop   :   1 push  :   1 rcall :  40 ret   :  60 
reti  :   2 rjmp  :  99 rol   :   3 ror   :   0 sbc   :   6 sbci  :   2 
sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :  32 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   3 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 129 std   :  36 sts   :  85 sub   :   5 subi  :  21 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 69 out of 116 (59.5%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001096   4102    144   4246   32768  13.0%
[.dseg] 0x000060 0x0002cf      0    111    111    2048   5.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
