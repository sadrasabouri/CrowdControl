
AVRASM ver. 2.1.30  E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm Fri Feb 05 18:37:25 2021

E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1088): warning: Register r4 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1089): warning: Register r5 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1090): warning: Register r6 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1091): warning: Register r7 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1092): warning: Register r8 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1093): warning: Register r9 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1094): warning: Register r11 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1095): warning: Register r12 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1096): warning: Register r13 already defined by the .DEF directive
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1097): warning: Register r10 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _second=R4
                 	.DEF _second_msb=R5
                 	.DEF _minute=R6
                 	.DEF _minute_msb=R7
                 	.DEF _hour=R8
                 	.DEF _hour_msb=R9
                 	.DEF _is_AM=R11
                 	.DEF _client_index=R12
                 	.DEF _client_index_msb=R13
                 	.DEF __lcd_x=R10
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 009b 	JMP  __RESET
000002 940c 00cf 	JMP  _ext_int0_isr
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 00c8 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 001e      	.DB  0x0,0x0,0x1E,0x0
000035 0007
000036 0100      	.DB  0x7,0x0,0x0,0x1
000037 0000      	.DB  0x0,0x0
                 
                 _0x3:
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1141): warning: .cseg .db misalignment - padding zero byte
000038 0001      	.DB  0x1
                 _0x0:
000039 2020
00003a 2520
00003b 3230
00003c 3a64      	.DB  0x20,0x20,0x20,0x25,0x30,0x32,0x64,0x3A
00003d 3025
00003e 6432
00003f 253a
000040 3230      	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
000041 2064
000042 5020
000043 004d
000044 2020      	.DB  0x64,0x20,0x20,0x50,0x4D,0x0,0x20,0x20
000045 2520
000046 3230
000047 3a64
000048 3025      	.DB  0x20,0x25,0x30,0x32,0x64,0x3A,0x25,0x30
000049 6432
00004a 253a
00004b 3230
00004c 2064      	.DB  0x32,0x64,0x3A,0x25,0x30,0x32,0x64,0x20
00004d 4120
00004e 004d
00004f 2020
000050 4320      	.DB  0x20,0x41,0x4D,0x0,0x20,0x20,0x20,0x43
000051 696c
000052 6e65
000053 2074
000054 2523      	.DB  0x6C,0x69,0x65,0x6E,0x74,0x20,0x23,0x25
000055 3330
000056 2064
000057 2020
000058 4700      	.DB  0x30,0x33,0x64,0x20,0x20,0x20,0x0,0x47
000059 206f
00005a 6f54
00005b 4320
00005c 756f      	.DB  0x6F,0x20,0x54,0x6F,0x20,0x43,0x6F,0x75
00005d 746e
00005e 7265
00005f 2523
000060 3230      	.DB  0x6E,0x74,0x65,0x72,0x23,0x25,0x30,0x32
000061 2164
000062 2000
000063 3325
000064 2064      	.DB  0x64,0x21,0x0,0x20,0x25,0x33,0x64,0x20
000065 6c43
000066 6569
000067 746e
000068 7328      	.DB  0x43,0x6C,0x69,0x65,0x6E,0x74,0x28,0x73
000069 2029
00006a 2000
00006b 2020
00006c 6542      	.DB  0x29,0x20,0x0,0x20,0x20,0x20,0x42,0x65
00006d 6f66
00006e 6572
00006f 5920
000070 756f      	.DB  0x66,0x6F,0x72,0x65,0x20,0x59,0x6F,0x75
000071 2020
000072 0020
000073 2020
000074 2020      	.DB  0x20,0x20,0x20,0x0,0x20,0x20,0x20,0x20
000075 6f53
000076 7272
000077 2079
000078 283a      	.DB  0x53,0x6F,0x72,0x72,0x79,0x20,0x3A,0x28
000079 2020
00007a 2020
00007b 2000
00007c 5420      	.DB  0x20,0x20,0x20,0x20,0x0,0x20,0x20,0x54
00007d 6d69
00007e 2765
00007f 2073
000080 764f      	.DB  0x69,0x6D,0x65,0x27,0x73,0x20,0x4F,0x76
000081 7265
000082 2021
000083 0020      	.DB  0x65,0x72,0x21,0x20,0x20,0x0
                 _0x2040060:
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1163): warning: .cseg .db misalignment - padding zero byte
000084 0001      	.DB  0x1
                 _0x2040000:
000085 4e2d
000086 4e41
000087 4900
000088 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
E:\EE.SUT\Computer Arch (Bagheri)\Project\CrowdControl\Code\Debug\List\final.asm(1166): warning: .cseg .db misalignment - padding zero byte
000089 0000      	.DB  0x0
                 _0x2060003:
00008a c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00008b 000a      	.DW  0x0A
00008c 0004      	.DW  0x04
00008d 0066      	.DW  __REG_VARS*2
                 
00008e 0001      	.DW  0x01
00008f 04c6      	.DW  _is_timeContinue
000090 0070      	.DW  _0x3*2
                 
000091 0001      	.DW  0x01
000092 0260      	.DW  _0x43
000093 0087      	.DW  _0x0*2+21
                 
000094 0001      	.DW  0x01
000095 04d8      	.DW  __seed_G102
000096 0108      	.DW  _0x2040060*2
                 
000097 0002      	.DW  0x02
000098 04dc      	.DW  __base_y_G103
000099 0114      	.DW  _0x2060003*2
                 
                 _0xFFFFFFFF:
00009a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00009b 94f8      	CLI
00009c 27ee      	CLR  R30
00009d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00009e e0f1      	LDI  R31,1
00009f bffb      	OUT  GICR,R31
0000a0 bfeb      	OUT  GICR,R30
0000a1 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
0000a2 e08d      	LDI  R24,(14-2)+1
0000a3 e0a2      	LDI  R26,2
0000a4 27bb      	CLR  R27
                 __CLEAR_REG:
0000a5 93ed      	ST   X+,R30
0000a6 958a      	DEC  R24
0000a7 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
0000a8 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
0000a9 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
0000aa e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
0000ab 93ed      	ST   X+,R30
0000ac 9701      	SBIW R24,1
0000ad f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
0000ae e1e6      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
0000af e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
0000b0 9185      	LPM  R24,Z+
0000b1 9195      	LPM  R25,Z+
0000b2 9700      	SBIW R24,0
0000b3 f061      	BREQ __GLOBAL_INI_END
0000b4 91a5      	LPM  R26,Z+
0000b5 91b5      	LPM  R27,Z+
0000b6 9005      	LPM  R0,Z+
0000b7 9015      	LPM  R1,Z+
0000b8 01bf      	MOVW R22,R30
0000b9 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
0000ba 9005      	LPM  R0,Z+
0000bb 920d      	ST   X+,R0
0000bc 9701      	SBIW R24,1
0000bd f7e1      	BRNE __GLOBAL_INI_LOOP
0000be 01fb      	MOVW R30,R22
0000bf cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000c0 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000c1 bfed      	OUT  SPL,R30
0000c2 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000c3 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000c4 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000c5 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000c6 940c 027f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <io.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <alcd.h>
                 ;#include <mega32.h>
                 ;
                 ;#define ONE_SEC 1000
                 ;#define SHOW_DELAY 3000
                 ;#define MAX_IN_QUE 100
                 ;int second = 0;
                 ;int minute = 30;
                 ;int hour = 7;
                 ;char is_AM = 1;
                 ;
                 ;//   fo Counter    1, 2, 3, 4, 5, 6, 7
                 ;char is_full[7] = {0, 0, 0, 0, 0, 0, 0};
                 ;//   fo Counter 1-5, 6, 7
                 ;int in_que[3] = {0 , 0, 0};
                 ;int que_1to5[MAX_IN_QUE] = {0};
                 ;int que_6[MAX_IN_QUE] = {0};
                 ;int que_7[MAX_IN_QUE] = {0};
                 ;int client_index = 0;
                 ;int is_timeContinue = 1;
                 
                 	.DSEG
                 ;char lcd_buffer[16];
                 ;
                 ;int pop_from_que(int*);
                 ;void push_to_que(int*, int);
                 ;void time_after(int, int*, int*, int*, char*);
                 ;int give_first_empty(char*, int);
                 ;void LCD_Goto_Counter (int, int);
                 ;void LCD_Show_Waiting (int);
                 ;void LCD_Out_Of_Time();
                 ;char GetKey();
                 ;
                 ;// Timer Interrupt - NOT WORKING
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0027 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000c8 93ea      	ST   -Y,R30
                 ; 0000 0028     // Reinitialize Timer1 Value
                 ; 0000 0029     TCNT1H = 0x85EE >> 8;
0000c9 e8e5      	LDI  R30,LOW(133)
0000ca bded      	OUT  0x2D,R30
                 ; 0000 002A     TCNT1L = 0x85EE & 0xff;
0000cb eeee      	LDI  R30,LOW(238)
0000cc bdec      	OUT  0x2C,R30
                 ; 0000 002B }
0000cd 91e9      	LD   R30,Y+
0000ce 9518      	RETI
                 ; .FEND
                 ;
                 ;// External Interrupt 0
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 002F {
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
0000cf 920a      	ST   -Y,R0
0000d0 921a      	ST   -Y,R1
0000d1 92fa      	ST   -Y,R15
0000d2 936a      	ST   -Y,R22
0000d3 937a      	ST   -Y,R23
0000d4 938a      	ST   -Y,R24
0000d5 939a      	ST   -Y,R25
0000d6 93aa      	ST   -Y,R26
0000d7 93ba      	ST   -Y,R27
0000d8 93ea      	ST   -Y,R30
0000d9 93fa      	ST   -Y,R31
0000da b7ef      	IN   R30,SREG
0000db 93ea      	ST   -Y,R30
                 ; 0000 0030     char key;
                 ; 0000 0031     int empt_counter_idx;
                 ; 0000 0032     key = GetKey();
0000dc 940e 0765 	CALL __SAVELOCR4
                 ;	key -> R17
                 ;	empt_counter_idx -> R18,R19
0000de d2b3      	RCALL _GetKey
0000df 2f1e      	MOV  R17,R30
                 ; 0000 0033     GICR |= (1 << INTF0);   //  Enalbe Interrupt Flag
0000e0 b7eb      	IN   R30,0x3B
0000e1 64e0      	ORI  R30,0x40
0000e2 bfeb      	OUT  0x3B,R30
                 ; 0000 0034     if(key != 0xFF) // dokme feshorde shod
0000e3 3f1f      	CPI  R17,255
0000e4 f409      	BRNE PC+2
0000e5 c135      	RJMP _0x4
                 ; 0000 0035     {
                 ; 0000 0036         if (!is_AM)
0000e6 20bb      	TST  R11
0000e7 f499      	BRNE _0x5
                 ; 0000 0037             if (hour > 1 || (hour == 1 && minute >= 30 ))
0000e8 e0e1      	LDI  R30,LOW(1)
0000e9 e0f0      	LDI  R31,HIGH(1)
0000ea 15e8      	CP   R30,R8
0000eb 05f9      	CPC  R31,R9
0000ec f04c      	BRLT _0x7
0000ed 15e8      	CP   R30,R8
0000ee 05f9      	CPC  R31,R9
0000ef f429      	BRNE _0x8
0000f0 e1ee      	LDI  R30,LOW(30)
0000f1 e0f0      	LDI  R31,HIGH(30)
0000f2 166e      	CP   R6,R30
0000f3 067f      	CPC  R7,R31
0000f4 f40c      	BRGE _0x7
                 _0x8:
0000f5 c005      	RJMP _0x6
                 _0x7:
                 ; 0000 0038                 is_timeContinue = 0;
0000f6 e0e0      	LDI  R30,LOW(0)
0000f7 93e0 04c6 	STS  _is_timeContinue,R30
0000f9 93e0 04c7 	STS  _is_timeContinue+1,R30
                 ; 0000 0039 
                 ; 0000 003A         switch(key)
                 _0x6:
                 _0x5:
0000fb 2fe1      	MOV  R30,R17
0000fc e0f0      	LDI  R31,0
                 ; 0000 003B         {
                 ; 0000 003C             case 1:
0000fd 30e1      	CPI  R30,LOW(0x1)
0000fe e0a0      	LDI  R26,HIGH(0x1)
0000ff 07fa      	CPC  R31,R26
000100 f569      	BRNE _0xE
                 ; 0000 003D                 if (is_timeContinue)
000101 940e 0631 	CALL SUBOPT_0x0
000103 f141      	BREQ _0xF
                 ; 0000 003E                 {
                 ; 0000 003F                     client_index++;
000104 940e 0637 	CALL SUBOPT_0x1
                 ; 0000 0040                     empt_counter_idx = give_first_empty(is_full, 5);
000106 e6e1      	LDI  R30,LOW(_is_full)
000107 e0f2      	LDI  R31,HIGH(_is_full)
000108 93fa      	ST   -Y,R31
000109 93ea      	ST   -Y,R30
00010a e0a5      	LDI  R26,LOW(5)
00010b e0b0      	LDI  R27,0
00010c d214      	RCALL _give_first_empty
00010d 019f      	MOVW R18,R30
                 ; 0000 0041                     if (empt_counter_idx != -1)
00010e efef      	LDI  R30,LOW(65535)
00010f efff      	LDI  R31,HIGH(65535)
000110 17e2      	CP   R30,R18
000111 07f3      	CPC  R31,R19
000112 f061      	BREQ _0x10
                 ; 0000 0042                     {
                 ; 0000 0043                         is_full[empt_counter_idx] = 1;
000113 e6a1      	LDI  R26,LOW(_is_full)
000114 e0b2      	LDI  R27,HIGH(_is_full)
000115 0fa2      	ADD  R26,R18
000116 1fb3      	ADC  R27,R19
000117 e0e1      	LDI  R30,LOW(1)
000118 93ec      	ST   X,R30
                 ; 0000 0044                         LCD_Goto_Counter(client_index, empt_counter_idx + 1);
000119 92da      	ST   -Y,R13
00011a 92ca      	ST   -Y,R12
00011b 01d9      	MOVW R26,R18
00011c 9611      	ADIW R26,1
00011d d21d      	RCALL _LCD_Goto_Counter
                 ; 0000 0045                     }
                 ; 0000 0046                     else // All Counters are full
00011e c00c      	RJMP _0x11
                 _0x10:
                 ; 0000 0047                     {
                 ; 0000 0048                         LCD_Show_Waiting(in_que[0]);
00011f 940e 063c 	CALL SUBOPT_0x2
000121 d233      	RCALL _LCD_Show_Waiting
                 ; 0000 0049                         in_que[0]++;
000122 940e 0641 	CALL SUBOPT_0x3
000124 9631      	ADIW R30,1
000125 93fe      	ST   -X,R31
000126 93ee      	ST   -X,R30
                 ; 0000 004A                         push_to_que(que_1to5, client_index);
000127 e6ee      	LDI  R30,LOW(_que_1to5)
000128 e0f2      	LDI  R31,HIGH(_que_1to5)
000129 940e 0646 	CALL SUBOPT_0x4
                 ; 0000 004B                     }
                 _0x11:
                 ; 0000 004C                 }
                 ; 0000 004D                 else    //  Running out of time
00012b c001      	RJMP _0x12
                 _0xF:
                 ; 0000 004E                     LCD_Out_Of_Time();
00012c d23e      	RCALL _LCD_Out_Of_Time
                 ; 0000 004F                 break;
                 _0x12:
00012d c0ed      	RJMP _0xD
                 ; 0000 0050 
                 ; 0000 0051             case 2:
                 _0xE:
00012e 30e2      	CPI  R30,LOW(0x2)
00012f e0a0      	LDI  R26,HIGH(0x2)
000130 07fa      	CPC  R31,R26
000131 f511      	BRNE _0x13
                 ; 0000 0052                 if (is_timeContinue)
000132 940e 0631 	CALL SUBOPT_0x0
000134 f0e9      	BREQ _0x14
                 ; 0000 0053                 {
                 ; 0000 0054                     client_index++;
000135 940e 0637 	CALL SUBOPT_0x1
                 ; 0000 0055                     if (!is_full[5]) //  Counter 6
                +
000137 91e0 0266+LDS R30 , _is_full + ( 5 )
                 	__GETB1MN _is_full,5
000139 30e0      	CPI  R30,0
00013a f449      	BRNE _0x15
                 ; 0000 0056                     {
                 ; 0000 0057                         is_full[5] = 1;
00013b e0e1      	LDI  R30,LOW(1)
                +
00013c 93e0 0266+STS _is_full + ( 5 ) , R30
                 	__PUTB1MN _is_full,5
                 ; 0000 0058                         LCD_Goto_Counter(client_index, 6);
00013e 92da      	ST   -Y,R13
00013f 92ca      	ST   -Y,R12
000140 e0a6      	LDI  R26,LOW(6)
000141 e0b0      	LDI  R27,0
000142 d1f8      	RCALL _LCD_Goto_Counter
                 ; 0000 0059                     }
                 ; 0000 005A                     else // All Counters are full
000143 c00d      	RJMP _0x16
                 _0x15:
                 ; 0000 005B                     {
                 ; 0000 005C                         LCD_Show_Waiting(in_que[1]);
                +
000144 91a0 026a+LDS R26 , _in_que + ( 2 )
000146 91b0 026b+LDS R27 , _in_que + ( 2 ) + 1
                 	__GETW2MN _in_que,2
000148 d20c      	RCALL _LCD_Show_Waiting
                 ; 0000 005D                         in_que[1]++;
                +
000149 e6aa     +LDI R26 , LOW ( _in_que + ( 2 ) )
00014a e0b2     +LDI R27 , HIGH ( _in_que + ( 2 ) )
                 	__POINTW2MN _in_que,2
00014b 940e 064b 	CALL SUBOPT_0x5
                 ; 0000 005E                         push_to_que(que_6, client_index);
00014d e3e6      	LDI  R30,LOW(_que_6)
00014e e0f3      	LDI  R31,HIGH(_que_6)
00014f 940e 0646 	CALL SUBOPT_0x4
                 ; 0000 005F                     }
                 _0x16:
                 ; 0000 0060                 }
                 ; 0000 0061                 else    //  Running out of time
000151 c001      	RJMP _0x17
                 _0x14:
                 ; 0000 0062                     LCD_Out_Of_Time();
000152 d218      	RCALL _LCD_Out_Of_Time
                 ; 0000 0063                 break;
                 _0x17:
000153 c0c7      	RJMP _0xD
                 ; 0000 0064 
                 ; 0000 0065             case 3:
                 _0x13:
000154 30e3      	CPI  R30,LOW(0x3)
000155 e0a0      	LDI  R26,HIGH(0x3)
000156 07fa      	CPC  R31,R26
000157 f511      	BRNE _0x18
                 ; 0000 0066                 if (is_timeContinue)
000158 940e 0631 	CALL SUBOPT_0x0
00015a f0e9      	BREQ _0x19
                 ; 0000 0067                 {
                 ; 0000 0068                     client_index++;
00015b 940e 0637 	CALL SUBOPT_0x1
                 ; 0000 0069                     if (!is_full[6]) //  Counter 7
                +
00015d 91e0 0267+LDS R30 , _is_full + ( 6 )
                 	__GETB1MN _is_full,6
00015f 30e0      	CPI  R30,0
000160 f449      	BRNE _0x1A
                 ; 0000 006A                     {
                 ; 0000 006B                         is_full[6] = 1;
000161 e0e1      	LDI  R30,LOW(1)
                +
000162 93e0 0267+STS _is_full + ( 6 ) , R30
                 	__PUTB1MN _is_full,6
                 ; 0000 006C                         LCD_Goto_Counter(client_index, 7);
000164 92da      	ST   -Y,R13
000165 92ca      	ST   -Y,R12
000166 e0a7      	LDI  R26,LOW(7)
000167 e0b0      	LDI  R27,0
000168 d1d2      	RCALL _LCD_Goto_Counter
                 ; 0000 006D                     }
                 ; 0000 006E                     else // All Counters are full
000169 c00d      	RJMP _0x1B
                 _0x1A:
                 ; 0000 006F                     {
                 ; 0000 0070                         LCD_Show_Waiting(in_que[2]);
                +
00016a 91a0 026c+LDS R26 , _in_que + ( 4 )
00016c 91b0 026d+LDS R27 , _in_que + ( 4 ) + 1
                 	__GETW2MN _in_que,4
00016e d1e6      	RCALL _LCD_Show_Waiting
                 ; 0000 0071                         in_que[2]++;
                +
00016f e6ac     +LDI R26 , LOW ( _in_que + ( 4 ) )
000170 e0b2     +LDI R27 , HIGH ( _in_que + ( 4 ) )
                 	__POINTW2MN _in_que,4
000171 940e 064b 	CALL SUBOPT_0x5
                 ; 0000 0072                         push_to_que(que_7, client_index);
000173 efee      	LDI  R30,LOW(_que_7)
000174 e0f3      	LDI  R31,HIGH(_que_7)
000175 940e 0646 	CALL SUBOPT_0x4
                 ; 0000 0073                     }
                 _0x1B:
                 ; 0000 0074                 }
                 ; 0000 0075                 else    //  Running out of time
000177 c001      	RJMP _0x1C
                 _0x19:
                 ; 0000 0076                     LCD_Out_Of_Time();
000178 d1f2      	RCALL _LCD_Out_Of_Time
                 ; 0000 0077                 break;
                 _0x1C:
000179 c0a1      	RJMP _0xD
                 ; 0000 0078 
                 ; 0000 0079             case 9: // Counter1
                 _0x18:
00017a 30e9      	CPI  R30,LOW(0x9)
00017b e0a0      	LDI  R26,HIGH(0x9)
00017c 07fa      	CPC  R31,R26
00017d f481      	BRNE _0x1D
                 ; 0000 007A                 is_full[0] = 0;
00017e e0e0      	LDI  R30,LOW(0)
00017f 93e0 0261 	STS  _is_full,R30
                 ; 0000 007B                 if (in_que[0] > 0)
000181 940e 0651 	CALL SUBOPT_0x6
000183 f44c      	BRGE _0x1E
                 ; 0000 007C                 {
                 ; 0000 007D                     in_que[0]--;
000184 940e 0641 	CALL SUBOPT_0x3
000186 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 007E                     LCD_Goto_Counter(pop_from_que(que_1to5), 1);
000188 e0a1      	LDI  R26,LOW(1)
000189 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 007F                     is_full[0] = 1;
00018b 93e0 0261 	STS  _is_full,R30
                 ; 0000 0080                 }
                 ; 0000 0081                 break;
                 _0x1E:
00018d c08d      	RJMP _0xD
                 ; 0000 0082 
                 ; 0000 0083             case 8: // Counter2
                 _0x1D:
00018e 30e8      	CPI  R30,LOW(0x8)
00018f e0a0      	LDI  R26,HIGH(0x8)
000190 07fa      	CPC  R31,R26
000191 f481      	BRNE _0x1F
                 ; 0000 0084                 is_full[1] = 0;
000192 e0e0      	LDI  R30,LOW(0)
                +
000193 93e0 0262+STS _is_full + ( 1 ) , R30
                 	__PUTB1MN _is_full,1
                 ; 0000 0085                 if (in_que[0] > 0)
000195 940e 0651 	CALL SUBOPT_0x6
000197 f44c      	BRGE _0x20
                 ; 0000 0086                 {
                 ; 0000 0087                     in_que[0]--;
000198 940e 0641 	CALL SUBOPT_0x3
00019a 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 0088                     LCD_Goto_Counter(pop_from_que(que_1to5), 2);
00019c e0a2      	LDI  R26,LOW(2)
00019d 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 0089                     is_full[1] = 1;
                +
00019f 93e0 0262+STS _is_full + ( 1 ) , R30
                 	__PUTB1MN _is_full,1
                 ; 0000 008A                 }
                 ; 0000 008B                 break;
                 _0x20:
0001a1 c079      	RJMP _0xD
                 ; 0000 008C 
                 ; 0000 008D             case 7: // Counter3
                 _0x1F:
0001a2 30e7      	CPI  R30,LOW(0x7)
0001a3 e0a0      	LDI  R26,HIGH(0x7)
0001a4 07fa      	CPC  R31,R26
0001a5 f481      	BRNE _0x21
                 ; 0000 008E                 is_full[2] = 0;
0001a6 e0e0      	LDI  R30,LOW(0)
                +
0001a7 93e0 0263+STS _is_full + ( 2 ) , R30
                 	__PUTB1MN _is_full,2
                 ; 0000 008F                 if (in_que[0] > 0)
0001a9 940e 0651 	CALL SUBOPT_0x6
0001ab f44c      	BRGE _0x22
                 ; 0000 0090                 {
                 ; 0000 0091                     in_que[0]--;
0001ac 940e 0641 	CALL SUBOPT_0x3
0001ae 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 0092                     LCD_Goto_Counter(pop_from_que(que_1to5), 3);
0001b0 e0a3      	LDI  R26,LOW(3)
0001b1 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 0093                     is_full[2] = 1;
                +
0001b3 93e0 0263+STS _is_full + ( 2 ) , R30
                 	__PUTB1MN _is_full,2
                 ; 0000 0094                 }
                 ; 0000 0095                 break;
                 _0x22:
0001b5 c065      	RJMP _0xD
                 ; 0000 0096             case 6: // Counter4
                 _0x21:
0001b6 30e6      	CPI  R30,LOW(0x6)
0001b7 e0a0      	LDI  R26,HIGH(0x6)
0001b8 07fa      	CPC  R31,R26
0001b9 f481      	BRNE _0x23
                 ; 0000 0097                 is_full[3] = 0;
0001ba e0e0      	LDI  R30,LOW(0)
                +
0001bb 93e0 0264+STS _is_full + ( 3 ) , R30
                 	__PUTB1MN _is_full,3
                 ; 0000 0098                 if (in_que[0] > 0)
0001bd 940e 0651 	CALL SUBOPT_0x6
0001bf f44c      	BRGE _0x24
                 ; 0000 0099                 {
                 ; 0000 009A                     in_que[0]--;
0001c0 940e 0641 	CALL SUBOPT_0x3
0001c2 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 009B                     LCD_Goto_Counter(pop_from_que(que_1to5), 4);
0001c4 e0a4      	LDI  R26,LOW(4)
0001c5 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 009C                     is_full[3] = 1;
                +
0001c7 93e0 0264+STS _is_full + ( 3 ) , R30
                 	__PUTB1MN _is_full,3
                 ; 0000 009D                 }
                 ; 0000 009E                 break;
                 _0x24:
0001c9 c051      	RJMP _0xD
                 ; 0000 009F             case 5: // Counter5
                 _0x23:
0001ca 30e5      	CPI  R30,LOW(0x5)
0001cb e0a0      	LDI  R26,HIGH(0x5)
0001cc 07fa      	CPC  R31,R26
0001cd f481      	BRNE _0x25
                 ; 0000 00A0                 is_full[4] = 0;
0001ce e0e0      	LDI  R30,LOW(0)
                +
0001cf 93e0 0265+STS _is_full + ( 4 ) , R30
                 	__PUTB1MN _is_full,4
                 ; 0000 00A1                 if (in_que[0] > 0)
0001d1 940e 0651 	CALL SUBOPT_0x6
0001d3 f44c      	BRGE _0x26
                 ; 0000 00A2                 {
                 ; 0000 00A3                     in_que[0]--;
0001d4 940e 0641 	CALL SUBOPT_0x3
0001d6 940e 0655 	CALL SUBOPT_0x7
                 ; 0000 00A4                     LCD_Goto_Counter(pop_from_que(que_1to5), 5);
0001d8 e0a5      	LDI  R26,LOW(5)
0001d9 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 00A5                     is_full[4] = 1;
                +
0001db 93e0 0265+STS _is_full + ( 4 ) , R30
                 	__PUTB1MN _is_full,4
                 ; 0000 00A6                 }
                 ; 0000 00A7                 break;
                 _0x26:
0001dd c03d      	RJMP _0xD
                 ; 0000 00A8             case 4: // Counter6
                 _0x25:
0001de 30e4      	CPI  R30,LOW(0x4)
0001df e0a0      	LDI  R26,HIGH(0x4)
0001e0 07fa      	CPC  R31,R26
0001e1 f4e1      	BRNE _0x27
                 ; 0000 00A9                 is_full[5] = 0;
0001e2 e0e0      	LDI  R30,LOW(0)
                +
0001e3 93e0 0266+STS _is_full + ( 5 ) , R30
                 	__PUTB1MN _is_full,5
                 ; 0000 00AA                 if (in_que[1] > 0)
                +
0001e5 91a0 026a+LDS R26 , _in_que + ( 2 )
0001e7 91b0 026b+LDS R27 , _in_que + ( 2 ) + 1
                 	__GETW2MN _in_que,2
0001e9 940e 075f 	CALL __CPW02
0001eb f48c      	BRGE _0x28
                 ; 0000 00AB                 {
                 ; 0000 00AC                     in_que[1]--;
                +
0001ec e6aa     +LDI R26 , LOW ( _in_que + ( 2 ) )
0001ed e0b2     +LDI R27 , HIGH ( _in_que + ( 2 ) )
                 	__POINTW2MN _in_que,2
0001ee 91ed      	LD   R30,X+
0001ef 91fd      	LD   R31,X+
0001f0 9731      	SBIW R30,1
0001f1 93fe      	ST   -X,R31
0001f2 93ee      	ST   -X,R30
                 ; 0000 00AD                     LCD_Goto_Counter(pop_from_que(que_6), 6);
0001f3 e3a6      	LDI  R26,LOW(_que_6)
0001f4 e0b3      	LDI  R27,HIGH(_que_6)
0001f5 d051      	RCALL _pop_from_que
0001f6 93fa      	ST   -Y,R31
0001f7 93ea      	ST   -Y,R30
0001f8 e0a6      	LDI  R26,LOW(6)
0001f9 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 00AE                     is_full[5] = 1;
                +
0001fb 93e0 0266+STS _is_full + ( 5 ) , R30
                 	__PUTB1MN _is_full,5
                 ; 0000 00AF                 }
                 ; 0000 00B0                 break;
                 _0x28:
0001fd c01d      	RJMP _0xD
                 ; 0000 00B1             case 0: // Counter7
                 _0x27:
0001fe 9730      	SBIW R30,0
0001ff f4d9      	BRNE _0xD
                 ; 0000 00B2                 is_full[6] = 0;
000200 e0e0      	LDI  R30,LOW(0)
                +
000201 93e0 0267+STS _is_full + ( 6 ) , R30
                 	__PUTB1MN _is_full,6
                 ; 0000 00B3                 if (in_que[2] > 0)
                +
000203 91a0 026c+LDS R26 , _in_que + ( 4 )
000205 91b0 026d+LDS R27 , _in_que + ( 4 ) + 1
                 	__GETW2MN _in_que,4
000207 940e 075f 	CALL __CPW02
000209 f48c      	BRGE _0x2A
                 ; 0000 00B4                 {
                 ; 0000 00B5                     in_que[2]--;
                +
00020a e6ac     +LDI R26 , LOW ( _in_que + ( 4 ) )
00020b e0b2     +LDI R27 , HIGH ( _in_que + ( 4 ) )
                 	__POINTW2MN _in_que,4
00020c 91ed      	LD   R30,X+
00020d 91fd      	LD   R31,X+
00020e 9731      	SBIW R30,1
00020f 93fe      	ST   -X,R31
000210 93ee      	ST   -X,R30
                 ; 0000 00B6                     LCD_Goto_Counter(pop_from_que(que_7), 7);
000211 efae      	LDI  R26,LOW(_que_7)
000212 e0b3      	LDI  R27,HIGH(_que_7)
000213 d033      	RCALL _pop_from_que
000214 93fa      	ST   -Y,R31
000215 93ea      	ST   -Y,R30
000216 e0a7      	LDI  R26,LOW(7)
000217 940e 065f 	CALL SUBOPT_0x8
                 ; 0000 00B7                     is_full[6] = 1;
                +
000219 93e0 0267+STS _is_full + ( 6 ) , R30
                 	__PUTB1MN _is_full,6
                 ; 0000 00B8                 }
                 ; 0000 00B9                 break;
                 _0x2A:
                 ; 0000 00BA         }
                 _0xD:
                 ; 0000 00BB     }
                 ; 0000 00BC }
                 _0x4:
00021b 940e 076c 	CALL __LOADLOCR4
00021d 9624      	ADIW R28,4
00021e 91e9      	LD   R30,Y+
00021f bfef      	OUT  SREG,R30
000220 91f9      	LD   R31,Y+
000221 91e9      	LD   R30,Y+
000222 91b9      	LD   R27,Y+
000223 91a9      	LD   R26,Y+
000224 9199      	LD   R25,Y+
000225 9189      	LD   R24,Y+
000226 9179      	LD   R23,Y+
000227 9169      	LD   R22,Y+
000228 90f9      	LD   R15,Y+
000229 9019      	LD   R1,Y+
00022a 9009      	LD   R0,Y+
00022b 9518      	RETI
                 ; .FEND
                 ;
                 ;void push_to_que(int* que, int who)
                 ; 0000 00BF {
                 _push_to_que:
                 ; .FSTART _push_to_que
                 ; 0000 00C0     int i = 0;
                 ; 0000 00C1     for(i = 0; i < MAX_IN_QUE; ++i)
00022c 940e 0664 	CALL SUBOPT_0x9
                 ;	*que -> Y+4
                 ;	who -> Y+2
                 ;	i -> R16,R17
                 _0x2C:
                +
00022e 3604     +CPI R16 , LOW ( 100 )
00022f e0e0     +LDI R30 , HIGH ( 100 )
000230 071e     +CPC R17 , R30
                 	__CPWRN 16,17,100
000231 f4a4      	BRGE _0x2D
                 ; 0000 00C2     {
                 ; 0000 00C3         if (que[i] == 0)
000232 940e 066d 	CALL SUBOPT_0xA
000234 0fae      	ADD  R26,R30
000235 1fbf      	ADC  R27,R31
000236 940e 0752 	CALL __GETW1P
000238 9730      	SBIW R30,0
000239 f449      	BRNE _0x2E
                 ; 0000 00C4         {
                 ; 0000 00C5             que[i] = who;
00023a 940e 066d 	CALL SUBOPT_0xA
00023c 0fea      	ADD  R30,R26
00023d 1ffb      	ADC  R31,R27
00023e 81aa      	LDD  R26,Y+2
00023f 81bb      	LDD  R27,Y+2+1
000240 83a0      	STD  Z+0,R26
000241 83b1      	STD  Z+1,R27
                 ; 0000 00C6             return;
000242 c0f4      	RJMP _0x20C0005
                 ; 0000 00C7         }
                 ; 0000 00C8     }
                 _0x2E:
                +
000243 5f0f     +SUBI R16 , LOW ( - 1 )
000244 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000245 cfe8      	RJMP _0x2C
                 _0x2D:
                 ; 0000 00C9     return;  //  Que overflow
000246 c0f0      	RJMP _0x20C0005
                 ; 0000 00CA }
                 ; .FEND
                 ;
                 ;int pop_from_que(int* que)
                 ; 0000 00CD {
                 _pop_from_que:
                 ; .FSTART _pop_from_que
                 ; 0000 00CE     int i = 0, value = 0;
                 ; 0000 00CF     if (que[0] == 0)
000247 93ba      	ST   -Y,R27
000248 93aa      	ST   -Y,R26
000249 940e 0765 	CALL __SAVELOCR4
                 ;	*que -> Y+4
                 ;	i -> R16,R17
                 ;	value -> R18,R19
                +
00024b e000     +LDI R16 , LOW ( 0 )
00024c e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00024d e020     +LDI R18 , LOW ( 0 )
00024e e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
00024f 81ac      	LDD  R26,Y+4
000250 81bd      	LDD  R27,Y+4+1
000251 940e 0752 	CALL __GETW1P
000253 9730      	SBIW R30,0
000254 f429      	BRNE _0x2F
                 ; 0000 00D0         return -1;
000255 efef      	LDI  R30,LOW(65535)
000256 efff      	LDI  R31,HIGH(65535)
000257 940e 076c 	CALL __LOADLOCR4
000259 c0df      	RJMP _0x20C0006
                 ; 0000 00D1     value = que[0];
                 _0x2F:
00025a 81ac      	LDD  R26,Y+4
00025b 81bd      	LDD  R27,Y+4+1
00025c 912d      	LD   R18,X+
00025d 913c      	LD   R19,X
                 ; 0000 00D2     while (que[i])
                 _0x30:
00025e 940e 066d 	CALL SUBOPT_0xA
000260 0fae      	ADD  R26,R30
000261 1fbf      	ADC  R27,R31
000262 940e 0752 	CALL __GETW1P
000264 9730      	SBIW R30,0
000265 f0a9      	BREQ _0x32
                 ; 0000 00D3     {
                 ; 0000 00D4         que[i] = que[i+1];
000266 940e 066d 	CALL SUBOPT_0xA
000268 0fea      	ADD  R30,R26
000269 1ffb      	ADC  R31,R27
00026a 010f      	MOVW R0,R30
00026b 01f8      	MOVW R30,R16
00026c 9631      	ADIW R30,1
00026d 81ac      	LDD  R26,Y+4
00026e 81bd      	LDD  R27,Y+4+1
00026f 0fee      	LSL  R30
000270 1fff      	ROL  R31
000271 0fae      	ADD  R26,R30
000272 1fbf      	ADC  R27,R31
000273 940e 0752 	CALL __GETW1P
000275 01d0      	MOVW R26,R0
000276 93ed      	ST   X+,R30
000277 93fc      	ST   X,R31
                 ; 0000 00D5         i++;
                +
000278 5f0f     +SUBI R16 , LOW ( - 1 )
000279 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
                 ; 0000 00D6     }
00027a cfe3      	RJMP _0x30
                 _0x32:
                 ; 0000 00D7     return value;
00027b 01f9      	MOVW R30,R18
00027c 940e 076c 	CALL __LOADLOCR4
00027e c0ba      	RJMP _0x20C0006
                 ; 0000 00D8 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00DB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00DC     DDRB = 0xFF;    //  Port B as output - To LCD
00027f efef      	LDI  R30,LOW(255)
000280 bbe7      	OUT  0x17,R30
                 ; 0000 00DD     PORTB = 0x00;   //  Initialize it by 0000_0000
000281 e0e0      	LDI  R30,LOW(0)
000282 bbe8      	OUT  0x18,R30
                 ; 0000 00DE     DDRC = 0xF0;    //  Port C as half input half output - From Keypad
000283 efe0      	LDI  R30,LOW(240)
000284 bbe4      	OUT  0x14,R30
                 ; 0000 00DF     PORTC = 0x0F;   //  Initialize it by 0000_1111
000285 e0ef      	LDI  R30,LOW(15)
000286 bbe5      	OUT  0x15,R30
                 ; 0000 00E0 
                 ; 0000 00E1     // External Interrupt(s) initialization
                 ; 0000 00E2     // INT0: On
                 ; 0000 00E3     // INT0 Mode: Falling Edge
                 ; 0000 00E4     // INT1: Off
                 ; 0000 00E5     // INT2: Off
                 ; 0000 00E6     GICR |= (0<<INT1) | (1<<INT0) | (0<<INT2);
000287 b7eb      	IN   R30,0x3B
000288 64e0      	ORI  R30,0x40
000289 bfeb      	OUT  0x3B,R30
                 ; 0000 00E7     MCUCR = (0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
00028a e0e2      	LDI  R30,LOW(2)
00028b bfe5      	OUT  0x35,R30
                 ; 0000 00E8     MCUCSR = (0<<ISC2);
00028c e0e0      	LDI  R30,LOW(0)
00028d bfe4      	OUT  0x34,R30
                 ; 0000 00E9     GIFR = (0<<INTF1) | (1<<INTF0) | (0<<INTF2);
00028e e4e0      	LDI  R30,LOW(64)
00028f bfea      	OUT  0x3A,R30
                 ; 0000 00EA 
                 ; 0000 00EB     // Timer/Counter 1 initialization
                 ; 0000 00EC     // Clock source: System Clock
                 ; 0000 00ED     // Clock value: 31/250 kHz
                 ; 0000 00EE     // Mode: Normal top=0xFFFF
                 ; 0000 00EF     // OC1A output: Disconnected
                 ; 0000 00F0     // OC1B output: Disconnected
                 ; 0000 00F1     // Noise Canceler: Off
                 ; 0000 00F2     // Input Capture on Falling Edge
                 ; 0000 00F3     // Timer Period: 1 s
                 ; 0000 00F4     // Timer1 Overflow Interrupt: On
                 ; 0000 00F5     // Input Capture Interrupt: Off
                 ; 0000 00F6     // Compare A Match Interrupt: Off
                 ; 0000 00F7     // Compare B Match Interrupt: Off
                 ; 0000 00F8     TCCR1A = (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000290 e0e0      	LDI  R30,LOW(0)
000291 bdef      	OUT  0x2F,R30
                 ; 0000 00F9     TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
000292 e0e4      	LDI  R30,LOW(4)
000293 bdee      	OUT  0x2E,R30
                 ; 0000 00FA     TCNT1H = 0x85;
000294 e8e5      	LDI  R30,LOW(133)
000295 bded      	OUT  0x2D,R30
                 ; 0000 00FB     TCNT1L = 0xEE;
000296 eeee      	LDI  R30,LOW(238)
000297 bdec      	OUT  0x2C,R30
                 ; 0000 00FC     ICR1H = 0x00;
000298 e0e0      	LDI  R30,LOW(0)
000299 bde7      	OUT  0x27,R30
                 ; 0000 00FD     ICR1L = 0x00;
00029a bde6      	OUT  0x26,R30
                 ; 0000 00FE     OCR1AH = 0x00;
00029b bdeb      	OUT  0x2B,R30
                 ; 0000 00FF     OCR1AL = 0x00;
00029c bdea      	OUT  0x2A,R30
                 ; 0000 0100     OCR1BH = 0x00;
00029d bde9      	OUT  0x29,R30
                 ; 0000 0101     OCR1BL = 0x00;
00029e bde8      	OUT  0x28,R30
                 ; 0000 0102 
                 ; 0000 0103     // Global Enable Interrupts
                 ; 0000 0104     #asm("sei")
00029f 9478      	sei
                 ; 0000 0105     lcd_init(16);
0002a0 e1a0      	LDI  R26,LOW(16)
0002a1 940e 0602 	CALL _lcd_init
                 ; 0000 0106 
                 ; 0000 0107     while (1)
                 _0x33:
                 ; 0000 0108     {
                 ; 0000 0109         if (!is_AM)
0002a3 20bb      	TST  R11
0002a4 f429      	BRNE _0x36
                 ; 0000 010A             sprintf(lcd_buffer,"   %02d:%02d:%02d  PM", hour, minute, second);
0002a5 940e 0673 	CALL SUBOPT_0xB
                +
0002a7 e7e2     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0002a8 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0002a9 c004      	RJMP _0x6A
                 ; 0000 010B         else
                 _0x36:
                 ; 0000 010C             sprintf(lcd_buffer,"   %02d:%02d:%02d  AM", hour, minute, second);
0002aa 940e 0673 	CALL SUBOPT_0xB
                +
0002ac e8e8     +LDI R30 , LOW ( 2 * _0x0 + ( 22 ) )
0002ad e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 22 ) )
                 	__POINTW1FN _0x0,22
                 _0x6A:
0002ae 93fa      	ST   -Y,R31
0002af 93ea      	ST   -Y,R30
0002b0 01f4      	MOVW R30,R8
0002b1 940e 0678 	CALL SUBOPT_0xC
0002b3 01f3      	MOVW R30,R6
0002b4 940e 0678 	CALL SUBOPT_0xC
0002b6 01f2      	MOVW R30,R4
0002b7 940e 0678 	CALL SUBOPT_0xC
0002b9 e08c      	LDI  R24,12
0002ba 940e 054e 	CALL _sprintf
0002bc 9660      	ADIW R28,16
                 ; 0000 010D         lcd_gotoxy(0,0);
0002bd 940e 067d 	CALL SUBOPT_0xD
                 ; 0000 010E         lcd_puts(lcd_buffer);
                 ; 0000 010F         delay_ms(ONE_SEC);
0002bf eea8      	LDI  R26,LOW(1000)
0002c0 e0b3      	LDI  R27,HIGH(1000)
0002c1 940e 0707 	CALL _delay_ms
                 ; 0000 0110         time_after(ONE_SEC, &hour, &minute, &second, &is_AM);
0002c3 eee8      	LDI  R30,LOW(1000)
0002c4 e0f3      	LDI  R31,HIGH(1000)
0002c5 940e 0686 	CALL SUBOPT_0xE
                 ; 0000 0111         lcd_clear();
                 ; 0000 0112     }
0002c7 cfdb      	RJMP _0x33
                 ; 0000 0113 }
                 _0x38:
0002c8 cfff      	RJMP _0x38
                 ; .FEND
                 ;
                 ;void time_after(int n, int* pthour, int* ptminute, int* ptsecond, char* ptis_AM)
                 ; 0000 0116 {
                 _time_after:
                 ; .FSTART _time_after
                 ; 0000 0117     unsigned char second = *ptsecond;
                 ; 0000 0118     unsigned char minute = *ptminute;
                 ; 0000 0119     unsigned char hour = *pthour;
                 ; 0000 011A 
                 ; 0000 011B     n = n / ONE_SEC;
0002c9 93ba      	ST   -Y,R27
0002ca 93aa      	ST   -Y,R26
0002cb 940e 0765 	CALL __SAVELOCR4
                 ;	n -> Y+12
                 ;	*pthour -> Y+10
                 ;	*ptminute -> Y+8
                 ;	*ptsecond -> Y+6
                 ;	*ptis_AM -> Y+4
                 ;	second -> R17
                 ;	minute -> R16
                 ;	hour -> R19
0002cd 81ae      	LDD  R26,Y+6
0002ce 81bf      	LDD  R27,Y+6+1
0002cf 91ec      	LD   R30,X
0002d0 2f1e      	MOV  R17,R30
0002d1 85a8      	LDD  R26,Y+8
0002d2 85b9      	LDD  R27,Y+8+1
0002d3 91ec      	LD   R30,X
0002d4 2f0e      	MOV  R16,R30
0002d5 85aa      	LDD  R26,Y+10
0002d6 85bb      	LDD  R27,Y+10+1
0002d7 91ec      	LD   R30,X
0002d8 2f3e      	MOV  R19,R30
0002d9 85ac      	LDD  R26,Y+12
0002da 85bd      	LDD  R27,Y+12+1
0002db eee8      	LDI  R30,LOW(1000)
0002dc e0f3      	LDI  R31,HIGH(1000)
0002dd 940e 0731 	CALL __DIVW21
0002df 87ec      	STD  Y+12,R30
0002e0 87fd      	STD  Y+12+1,R31
                 ; 0000 011C     second += n;
0002e1 85ec      	LDD  R30,Y+12
0002e2 0f1e      	ADD  R17,R30
                 ; 0000 011D     if (second > 59)
0002e3 331c      	CPI  R17,60
0002e4 f040      	BRLO _0x39
                 ; 0000 011E     {
                 ; 0000 011F         minute += 1;
0002e5 5f0f      	SUBI R16,-LOW(1)
                 ; 0000 0120         second = second % 60;
0002e6 2fa1      	MOV  R26,R17
0002e7 27bb      	CLR  R27
0002e8 e3ec      	LDI  R30,LOW(60)
0002e9 e0f0      	LDI  R31,HIGH(60)
0002ea 940e 0736 	CALL __MODW21
0002ec 2f1e      	MOV  R17,R30
                 ; 0000 0121     }
                 ; 0000 0122     if (minute > 59)
                 _0x39:
0002ed 330c      	CPI  R16,60
0002ee f040      	BRLO _0x3A
                 ; 0000 0123     {
                 ; 0000 0124         hour += 1;
0002ef 5f3f      	SUBI R19,-LOW(1)
                 ; 0000 0125         minute = minute % 60;
0002f0 2fa0      	MOV  R26,R16
0002f1 27bb      	CLR  R27
0002f2 e3ec      	LDI  R30,LOW(60)
0002f3 e0f0      	LDI  R31,HIGH(60)
0002f4 940e 0736 	CALL __MODW21
0002f6 2f0e      	MOV  R16,R30
                 ; 0000 0126     }
                 ; 0000 0127     if (hour > 12)
                 _0x3A:
0002f7 303d      	CPI  R19,13
0002f8 f090      	BRLO _0x3B
                 ; 0000 0128     {
                 ; 0000 0129         hour = hour % 12;
0002f9 2fa3      	MOV  R26,R19
0002fa 27bb      	CLR  R27
0002fb e0ec      	LDI  R30,LOW(12)
0002fc e0f0      	LDI  R31,HIGH(12)
0002fd 940e 0736 	CALL __MODW21
0002ff 2f3e      	MOV  R19,R30
                 ; 0000 012A         *ptis_AM = *ptis_AM ? 0 : 1;    //  is_AM = ~is_AM
000300 81ac      	LDD  R26,Y+4
000301 81bd      	LDD  R27,Y+4+1
000302 91ec      	LD   R30,X
000303 30e0      	CPI  R30,0
000304 f011      	BREQ _0x3C
000305 e0e0      	LDI  R30,LOW(0)
000306 c001      	RJMP _0x3D
                 _0x3C:
000307 e0e1      	LDI  R30,LOW(1)
                 _0x3D:
000308 81ac      	LDD  R26,Y+4
000309 81bd      	LDD  R27,Y+4+1
00030a 93ec      	ST   X,R30
                 ; 0000 012B     }
                 ; 0000 012C 
                 ; 0000 012D     *ptsecond = second;
                 _0x3B:
00030b 2fe1      	MOV  R30,R17
00030c 81ae      	LDD  R26,Y+6
00030d 81bf      	LDD  R27,Y+6+1
00030e e0f0      	LDI  R31,0
00030f 93ed      	ST   X+,R30
000310 93fc      	ST   X,R31
                 ; 0000 012E     *ptminute = minute;
000311 2fe0      	MOV  R30,R16
000312 85a8      	LDD  R26,Y+8
000313 85b9      	LDD  R27,Y+8+1
000314 e0f0      	LDI  R31,0
000315 93ed      	ST   X+,R30
000316 93fc      	ST   X,R31
                 ; 0000 012F     *pthour = hour;
000317 2fe3      	MOV  R30,R19
000318 85aa      	LDD  R26,Y+10
000319 85bb      	LDD  R27,Y+10+1
00031a e0f0      	LDI  R31,0
00031b 93ed      	ST   X+,R30
00031c 93fc      	ST   X,R31
                 ; 0000 0130 }
00031d 940e 076c 	CALL __LOADLOCR4
00031f 962e      	ADIW R28,14
000320 9508      	RET
                 ; .FEND
                 ;
                 ;int give_first_empty(char* is_full, int to)
                 ; 0000 0133 {
                 _give_first_empty:
                 ; .FSTART _give_first_empty
                 ; 0000 0134     int i = 0;
                 ; 0000 0135     for (i = 0; i < to; ++i)
000321 940e 0664 	CALL SUBOPT_0x9
                 ;	*is_full -> Y+4
                 ;	to -> Y+2
                 ;	i -> R16,R17
                 _0x40:
000323 81ea      	LDD  R30,Y+2
000324 81fb      	LDD  R31,Y+2+1
000325 170e      	CP   R16,R30
000326 071f      	CPC  R17,R31
000327 f46c      	BRGE _0x41
                 ; 0000 0136     {
                 ; 0000 0137         if (!is_full[i])
000328 01f8      	MOVW R30,R16
000329 81ac      	LDD  R26,Y+4
00032a 81bd      	LDD  R27,Y+4+1
00032b 0fae      	ADD  R26,R30
00032c 1fbf      	ADC  R27,R31
00032d 91ec      	LD   R30,X
00032e 30e0      	CPI  R30,0
00032f f411      	BRNE _0x42
                 ; 0000 0138             return i;
000330 01f8      	MOVW R30,R16
000331 c005      	RJMP _0x20C0005
                 ; 0000 0139     }
                 _0x42:
                +
000332 5f0f     +SUBI R16 , LOW ( - 1 )
000333 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000334 cfee      	RJMP _0x40
                 _0x41:
                 ; 0000 013A     return -1;
000335 efef      	LDI  R30,LOW(65535)
000336 efff      	LDI  R31,HIGH(65535)
                 _0x20C0005:
000337 8119      	LDD  R17,Y+1
000338 8108      	LDD  R16,Y+0
                 _0x20C0006:
000339 9626      	ADIW R28,6
00033a 9508      	RET
                 ; 0000 013B }
                 ; .FEND
                 ;
                 ;void LCD_Goto_Counter(int clinet_number, int counter_number)
                 ; 0000 013E {
                 _LCD_Goto_Counter:
                 ; .FSTART _LCD_Goto_Counter
                 ; 0000 013F     lcd_clear();
00033b 940e 069a 	CALL SUBOPT_0xF
                 ;	clinet_number -> Y+2
                 ;	counter_number -> Y+0
                 ; 0000 0140 
                 ; 0000 0141     sprintf(lcd_buffer,"   Client #%03d   ", clinet_number);
                +
00033d e9ee     +LDI R30 , LOW ( 2 * _0x0 + ( 44 ) )
00033e e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 44 ) )
                 	__POINTW1FN _0x0,44
00033f 93fa      	ST   -Y,R31
000340 93ea      	ST   -Y,R30
000341 81ee      	LDD  R30,Y+6
000342 81ff      	LDD  R31,Y+6+1
000343 940e 0678 	CALL SUBOPT_0xC
000345 940e 069f 	CALL SUBOPT_0x10
                 ; 0000 0142     lcd_gotoxy(0, 0);
000347 940e 067d 	CALL SUBOPT_0xD
                 ; 0000 0143     lcd_puts(lcd_buffer);
                 ; 0000 0144 
                 ; 0000 0145     sprintf(lcd_buffer,"Go To Counter#%02d!", counter_number);
000349 940e 0673 	CALL SUBOPT_0xB
                +
00034b ebe1     +LDI R30 , LOW ( 2 * _0x0 + ( 63 ) )
00034c e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 63 ) )
                 	__POINTW1FN _0x0,63
00034d 940e 06a4 	CALL SUBOPT_0x11
00034f 940e 069f 	CALL SUBOPT_0x10
                 ; 0000 0146     lcd_gotoxy(0, 1);
000351 940e 06a9 	CALL SUBOPT_0x12
                 ; 0000 0147     lcd_puts(lcd_buffer);
                 ; 0000 0148 
                 ; 0000 0149     delay_ms(SHOW_DELAY);
                 ; 0000 014A     time_after(SHOW_DELAY, &hour, &minute, &second, &is_AM);
                 ; 0000 014B     lcd_clear();
                 ; 0000 014C }
000353 9624      	ADIW R28,4
000354 9508      	RET
                 ; .FEND
                 ;
                 ;void LCD_Show_Waiting(int togo_number)
                 ; 0000 014F {
                 _LCD_Show_Waiting:
                 ; .FSTART _LCD_Show_Waiting
                 ; 0000 0150     lcd_clear();
000355 940e 069a 	CALL SUBOPT_0xF
                 ;	togo_number -> Y+0
                 ; 0000 0151 
                 ; 0000 0152     sprintf(lcd_buffer," %3d Client(s) ", togo_number);
                +
000357 ece5     +LDI R30 , LOW ( 2 * _0x0 + ( 83 ) )
000358 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 83 ) )
                 	__POINTW1FN _0x0,83
000359 940e 06a4 	CALL SUBOPT_0x11
00035b 940e 069f 	CALL SUBOPT_0x10
                 ; 0000 0153     lcd_gotoxy(0, 0);
00035d 940e 067d 	CALL SUBOPT_0xD
                 ; 0000 0154     lcd_puts(lcd_buffer);
                 ; 0000 0155 
                 ; 0000 0156     sprintf(lcd_buffer,"   Before You   ", togo_number);
00035f 940e 0673 	CALL SUBOPT_0xB
                +
000361 ede5     +LDI R30 , LOW ( 2 * _0x0 + ( 99 ) )
000362 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 99 ) )
                 	__POINTW1FN _0x0,99
000363 940e 06a4 	CALL SUBOPT_0x11
000365 940e 069f 	CALL SUBOPT_0x10
                 ; 0000 0157     lcd_gotoxy(0, 1);
000367 940e 06a9 	CALL SUBOPT_0x12
                 ; 0000 0158     lcd_puts(lcd_buffer);
                 ; 0000 0159 
                 ; 0000 015A     delay_ms(SHOW_DELAY);
                 ; 0000 015B     time_after(SHOW_DELAY, &hour, &minute, &second, &is_AM);
                 ; 0000 015C     lcd_clear();
                 ; 0000 015D }
000369 940c 05c8 	JMP  _0x20C0002
                 ; .FEND
                 ;
                 ;void LCD_Out_Of_Time()
                 ; 0000 0160 {
                 _LCD_Out_Of_Time:
                 ; .FSTART _LCD_Out_Of_Time
                 ; 0000 0161     char* lcd_buffer = "";
                 ; 0000 0162 
                 ; 0000 0163     lcd_clear();
00036b 931a      	ST   -Y,R17
00036c 930a      	ST   -Y,R16
                 ;	*lcd_buffer -> R16,R17
                +
00036d e600     +LDI R16 , LOW ( _0x43 + ( 0 ) )
00036e e012     +LDI R17 , HIGH ( _0x43 + ( 0 ) )
                 	__POINTWRMN 16,17,_0x43,0
00036f 940e 05ca 	CALL _lcd_clear
                 ; 0000 0164 
                 ; 0000 0165     sprintf(lcd_buffer,"    Sorry :(    ");
000371 931a      	ST   -Y,R17
000372 930a      	ST   -Y,R16
                +
000373 eee6     +LDI R30 , LOW ( 2 * _0x0 + ( 116 ) )
000374 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 116 ) )
                 	__POINTW1FN _0x0,116
000375 940e 06b9 	CALL SUBOPT_0x13
                 ; 0000 0166     lcd_gotoxy(0, 0);
000377 e0a0      	LDI  R26,LOW(0)
000378 940e 05bb 	CALL _lcd_gotoxy
                 ; 0000 0167     lcd_puts(lcd_buffer);
00037a 01d8      	MOVW R26,R16
00037b 940e 05f1 	CALL _lcd_puts
                 ; 0000 0168 
                 ; 0000 0169     sprintf(lcd_buffer,"  Time's Over!  ");
00037d 931a      	ST   -Y,R17
00037e 930a      	ST   -Y,R16
                +
00037f efe7     +LDI R30 , LOW ( 2 * _0x0 + ( 133 ) )
000380 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 133 ) )
                 	__POINTW1FN _0x0,133
000381 940e 06b9 	CALL SUBOPT_0x13
                 ; 0000 016A     lcd_gotoxy(0, 1);
000383 e0a1      	LDI  R26,LOW(1)
000384 940e 05bb 	CALL _lcd_gotoxy
                 ; 0000 016B     lcd_puts(lcd_buffer);
000386 01d8      	MOVW R26,R16
000387 940e 05f1 	CALL _lcd_puts
                 ; 0000 016C 
                 ; 0000 016D     delay_ms(SHOW_DELAY);
000389 eba8      	LDI  R26,LOW(3000)
00038a e0bb      	LDI  R27,HIGH(3000)
00038b 940e 0707 	CALL _delay_ms
                 ; 0000 016E     time_after(SHOW_DELAY, &hour, &minute, &second, &is_AM);
00038d ebe8      	LDI  R30,LOW(3000)
00038e e0fb      	LDI  R31,HIGH(3000)
00038f 940e 0686 	CALL SUBOPT_0xE
                 ; 0000 016F     lcd_clear();
                 ; 0000 0170 }
000391 c04b      	RJMP _0x20C0004
                 ; .FEND
                 
                 	.DSEG
                 _0x43:
000260           	.BYTE 0x1
                 ;
                 ;char GetKey()
                 ; 0000 0173 {
                 
                 	.CSEG
                 _GetKey:
                 ; .FSTART _GetKey
                 ; 0000 0174     unsigned char key_code = 0xFF;
                 ; 0000 0175     unsigned char columns;
                 ; 0000 0176 
                 ; 0000 0177     PORTC = 0xFF;
000392 931a      	ST   -Y,R17
000393 930a      	ST   -Y,R16
                 ;	key_code -> R17
                 ;	columns -> R16
000394 ef1f      	LDI  R17,255
000395 efef      	LDI  R30,LOW(255)
000396 bbe5      	OUT  0x15,R30
                 ; 0000 0178 
                 ; 0000 0179     // First Row
                 ; 0000 017A     PORTC.4 = 0;
000397 98ac      	CBI  0x15,4
                 ; 0000 017B     columns = PINC & 0x07;
000398 940e 06c2 	CALL SUBOPT_0x14
                 ; 0000 017C     if(columns != 0x07)
00039a f081      	BREQ _0x46
                 ; 0000 017D     {
                 ; 0000 017E     switch(columns)
00039b 940e 06c7 	CALL SUBOPT_0x15
                 ; 0000 017F         {
                 ; 0000 0180         case 0b110 : key_code = 1; break;
00039d f411      	BRNE _0x4A
00039e e011      	LDI  R17,LOW(1)
00039f c00b      	RJMP _0x49
                 ; 0000 0181         case 0b101 : key_code = 2; break;
                 _0x4A:
0003a0 30e5      	CPI  R30,LOW(0x5)
0003a1 e0a0      	LDI  R26,HIGH(0x5)
0003a2 07fa      	CPC  R31,R26
0003a3 f411      	BRNE _0x4B
0003a4 e012      	LDI  R17,LOW(2)
0003a5 c005      	RJMP _0x49
                 ; 0000 0182         case 0b011 : key_code = 3; break;
                 _0x4B:
0003a6 30e3      	CPI  R30,LOW(0x3)
0003a7 e0a0      	LDI  R26,HIGH(0x3)
0003a8 07fa      	CPC  R31,R26
0003a9 f409      	BRNE _0x49
0003aa e013      	LDI  R17,LOW(3)
                 ; 0000 0183         }
                 _0x49:
                 ; 0000 0184     }
                 ; 0000 0185     PORTC.4 = 1;
                 _0x46:
0003ab 9aac      	SBI  0x15,4
                 ; 0000 0186 
                 ; 0000 0187     // Second Row
                 ; 0000 0188     PORTC.5 = 0;
0003ac 98ad      	CBI  0x15,5
                 ; 0000 0189     columns = PINC & 0x07;
0003ad 940e 06c2 	CALL SUBOPT_0x14
                 ; 0000 018A     if(columns != 0x07)
0003af f081      	BREQ _0x51
                 ; 0000 018B     {
                 ; 0000 018C     switch(columns)
0003b0 940e 06c7 	CALL SUBOPT_0x15
                 ; 0000 018D         {
                 ; 0000 018E         case 0b110 : key_code = 4; break;
0003b2 f411      	BRNE _0x55
0003b3 e014      	LDI  R17,LOW(4)
0003b4 c00b      	RJMP _0x54
                 ; 0000 018F         case 0b101 : key_code = 5; break;
                 _0x55:
0003b5 30e5      	CPI  R30,LOW(0x5)
0003b6 e0a0      	LDI  R26,HIGH(0x5)
0003b7 07fa      	CPC  R31,R26
0003b8 f411      	BRNE _0x56
0003b9 e015      	LDI  R17,LOW(5)
0003ba c005      	RJMP _0x54
                 ; 0000 0190         case 0b011 : key_code = 6; break;
                 _0x56:
0003bb 30e3      	CPI  R30,LOW(0x3)
0003bc e0a0      	LDI  R26,HIGH(0x3)
0003bd 07fa      	CPC  R31,R26
0003be f409      	BRNE _0x54
0003bf e016      	LDI  R17,LOW(6)
                 ; 0000 0191         }
                 _0x54:
                 ; 0000 0192     }
                 ; 0000 0193     PORTC.5 = 1;
                 _0x51:
0003c0 9aad      	SBI  0x15,5
                 ; 0000 0194 
                 ; 0000 0195     // Third Row
                 ; 0000 0196     PORTC.6 = 0;
0003c1 98ae      	CBI  0x15,6
                 ; 0000 0197     columns = PINC & 0x07;
0003c2 940e 06c2 	CALL SUBOPT_0x14
                 ; 0000 0198     if(columns != 0x07)
0003c4 f081      	BREQ _0x5C
                 ; 0000 0199     {
                 ; 0000 019A     switch(columns)
0003c5 940e 06c7 	CALL SUBOPT_0x15
                 ; 0000 019B         {
                 ; 0000 019C         case 0b110 : key_code = 7; break;
0003c7 f411      	BRNE _0x60
0003c8 e017      	LDI  R17,LOW(7)
0003c9 c00b      	RJMP _0x5F
                 ; 0000 019D         case 0b101 : key_code = 8; break;
                 _0x60:
0003ca 30e5      	CPI  R30,LOW(0x5)
0003cb e0a0      	LDI  R26,HIGH(0x5)
0003cc 07fa      	CPC  R31,R26
0003cd f411      	BRNE _0x61
0003ce e018      	LDI  R17,LOW(8)
0003cf c005      	RJMP _0x5F
                 ; 0000 019E         case 0b011 : key_code = 9; break;
                 _0x61:
0003d0 30e3      	CPI  R30,LOW(0x3)
0003d1 e0a0      	LDI  R26,HIGH(0x3)
0003d2 07fa      	CPC  R31,R26
0003d3 f409      	BRNE _0x5F
0003d4 e019      	LDI  R17,LOW(9)
                 ; 0000 019F         }
                 _0x5F:
                 ; 0000 01A0     }
                 ; 0000 01A1     PORTC.6 = 1;
                 _0x5C:
0003d5 9aae      	SBI  0x15,6
                 ; 0000 01A2 
                 ; 0000 01A3     // Fourth Row
                 ; 0000 01A4     PORTC.7 = 0;
0003d6 98af      	CBI  0x15,7
                 ; 0000 01A5     if(!PINC.1) key_code = 0;
0003d7 9b99      	SBIS 0x13,1
0003d8 e010      	LDI  R17,LOW(0)
                 ; 0000 01A6     PORTC.7 = 1;
0003d9 9aaf      	SBI  0x15,7
                 ; 0000 01A7 
                 ; 0000 01A8     PORTC = 0x0F;
0003da e0ef      	LDI  R30,LOW(15)
0003db bbe5      	OUT  0x15,R30
                 ; 0000 01A9     return key_code;
0003dc 2fe1      	MOV  R30,R17
                 _0x20C0004:
0003dd 9109      	LD   R16,Y+
0003de 9119      	LD   R17,Y+
0003df 9508      	RET
                 ; 0000 01AA }
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
0003e0 93ba      	ST   -Y,R27
0003e1 93aa      	ST   -Y,R26
0003e2 931a      	ST   -Y,R17
0003e3 930a      	ST   -Y,R16
0003e4 81aa      	LDD  R26,Y+2
0003e5 81bb      	LDD  R27,Y+2+1
0003e6 9612      	ADIW R26,2
0003e7 940e 0752 	CALL __GETW1P
0003e9 9730      	SBIW R30,0
0003ea f129      	BREQ _0x2000010
0003eb 81aa      	LDD  R26,Y+2
0003ec 81bb      	LDD  R27,Y+2+1
0003ed 9614      	ADIW R26,4
0003ee 940e 0752 	CALL __GETW1P
0003f0 018f      	MOVW R16,R30
0003f1 9730      	SBIW R30,0
0003f2 f061      	BREQ _0x2000012
                +
0003f3 3002     +CPI R16 , LOW ( 2 )
0003f4 e0e0     +LDI R30 , HIGH ( 2 )
0003f5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0003f6 f080      	BRLO _0x2000013
0003f7 01f8      	MOVW R30,R16
0003f8 9731      	SBIW R30,1
0003f9 018f      	MOVW R16,R30
                +
0003fa 81aa     +LDD R26 , Y + 2
0003fb 81bb     +LDD R27 , Y + 2 + 1
0003fc 9614     +ADIW R26 , 4
0003fd 93ed     +ST X + , R30
0003fe 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
0003ff 81aa      	LDD  R26,Y+2
000400 81bb      	LDD  R27,Y+2+1
000401 9612      	ADIW R26,2
000402 940e 064b 	CALL SUBOPT_0x5
000404 9731      	SBIW R30,1
000405 81ac      	LDD  R26,Y+4
000406 83a0      	STD  Z+0,R26
                 _0x2000013:
000407 81aa      	LDD  R26,Y+2
000408 81bb      	LDD  R27,Y+2+1
000409 940e 0752 	CALL __GETW1P
00040b 23ff      	TST  R31
00040c f012      	BRMI _0x2000014
00040d 940e 064b 	CALL SUBOPT_0x5
                 _0x2000014:
00040f c006      	RJMP _0x2000015
                 _0x2000010:
000410 81aa      	LDD  R26,Y+2
000411 81bb      	LDD  R27,Y+2+1
000412 efef      	LDI  R30,LOW(65535)
000413 efff      	LDI  R31,HIGH(65535)
000414 93ed      	ST   X+,R30
000415 93fc      	ST   X,R31
                 _0x2000015:
000416 8119      	LDD  R17,Y+1
000417 8108      	LDD  R16,Y+0
000418 9625      	ADIW R28,5
000419 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00041a 93ba      	ST   -Y,R27
00041b 93aa      	ST   -Y,R26
00041c 9726      	SBIW R28,6
00041d 940e 0763 	CALL __SAVELOCR6
00041f e010      	LDI  R17,0
000420 85ac      	LDD  R26,Y+12
000421 85bd      	LDD  R27,Y+12+1
000422 e0e0      	LDI  R30,LOW(0)
000423 e0f0      	LDI  R31,HIGH(0)
000424 93ed      	ST   X+,R30
000425 93fc      	ST   X,R31
                 _0x2000016:
000426 89ea      	LDD  R30,Y+18
000427 89fb      	LDD  R31,Y+18+1
000428 9631      	ADIW R30,1
000429 8bea      	STD  Y+18,R30
00042a 8bfb      	STD  Y+18+1,R31
00042b 9731      	SBIW R30,1
00042c 91e4      	LPM  R30,Z
00042d 2f2e      	MOV  R18,R30
00042e 30e0      	CPI  R30,0
00042f f409      	BRNE PC+2
000430 c115      	RJMP _0x2000018
000431 2fe1      	MOV  R30,R17
000432 30e0      	CPI  R30,0
000433 f439      	BRNE _0x200001C
000434 3225      	CPI  R18,37
000435 f411      	BRNE _0x200001D
000436 e011      	LDI  R17,LOW(1)
000437 c002      	RJMP _0x200001E
                 _0x200001D:
000438 940e 06cd 	CALL SUBOPT_0x16
                 _0x200001E:
00043a c10a      	RJMP _0x200001B
                 _0x200001C:
00043b 30e1      	CPI  R30,LOW(0x1)
00043c f4a9      	BRNE _0x200001F
00043d 3225      	CPI  R18,37
00043e f419      	BRNE _0x2000020
00043f 940e 06cd 	CALL SUBOPT_0x16
000441 c102      	RJMP _0x20000CC
                 _0x2000020:
000442 e012      	LDI  R17,LOW(2)
000443 e040      	LDI  R20,LOW(0)
000444 e000      	LDI  R16,LOW(0)
000445 322d      	CPI  R18,45
000446 f411      	BRNE _0x2000021
000447 e001      	LDI  R16,LOW(1)
000448 c0fc      	RJMP _0x200001B
                 _0x2000021:
000449 322b      	CPI  R18,43
00044a f411      	BRNE _0x2000022
00044b e24b      	LDI  R20,LOW(43)
00044c c0f8      	RJMP _0x200001B
                 _0x2000022:
00044d 3220      	CPI  R18,32
00044e f411      	BRNE _0x2000023
00044f e240      	LDI  R20,LOW(32)
000450 c0f4      	RJMP _0x200001B
                 _0x2000023:
000451 c002      	RJMP _0x2000024
                 _0x200001F:
000452 30e2      	CPI  R30,LOW(0x2)
000453 f439      	BRNE _0x2000025
                 _0x2000024:
000454 e050      	LDI  R21,LOW(0)
000455 e013      	LDI  R17,LOW(3)
000456 3320      	CPI  R18,48
000457 f411      	BRNE _0x2000026
000458 6800      	ORI  R16,LOW(128)
000459 c0eb      	RJMP _0x200001B
                 _0x2000026:
00045a c003      	RJMP _0x2000027
                 _0x2000025:
00045b 30e3      	CPI  R30,LOW(0x3)
00045c f009      	BREQ PC+2
00045d c0e7      	RJMP _0x200001B
                 _0x2000027:
00045e 3320      	CPI  R18,48
00045f f010      	BRLO _0x200002A
000460 332a      	CPI  R18,58
000461 f008      	BRLO _0x200002B
                 _0x200002A:
000462 c007      	RJMP _0x2000029
                 _0x200002B:
000463 e0aa      	LDI  R26,LOW(10)
000464 9f5a      	MUL  R21,R26
000465 2d50      	MOV  R21,R0
000466 2fe2      	MOV  R30,R18
000467 53e0      	SUBI R30,LOW(48)
000468 0f5e      	ADD  R21,R30
000469 c0db      	RJMP _0x200001B
                 _0x2000029:
00046a 2fe2      	MOV  R30,R18
00046b 36e3      	CPI  R30,LOW(0x63)
00046c f449      	BRNE _0x200002F
00046d 940e 06d4 	CALL SUBOPT_0x17
00046f 89e8      	LDD  R30,Y+16
000470 89f9      	LDD  R31,Y+16+1
000471 81a4      	LDD  R26,Z+4
000472 93aa      	ST   -Y,R26
000473 940e 06da 	CALL SUBOPT_0x18
000475 c0ce      	RJMP _0x2000030
                 _0x200002F:
000476 37e3      	CPI  R30,LOW(0x73)
000477 f441      	BRNE _0x2000032
000478 940e 06d4 	CALL SUBOPT_0x17
00047a 940e 06e0 	CALL SUBOPT_0x19
00047c 940e 0582 	CALL _strlen
00047e 2f1e      	MOV  R17,R30
00047f c00a      	RJMP _0x2000033
                 _0x2000032:
000480 37e0      	CPI  R30,LOW(0x70)
000481 f461      	BRNE _0x2000035
000482 940e 06d4 	CALL SUBOPT_0x17
000484 940e 06e0 	CALL SUBOPT_0x19
000486 940e 058e 	CALL _strlenf
000488 2f1e      	MOV  R17,R30
000489 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00048a 6002      	ORI  R16,LOW(2)
00048b 770f      	ANDI R16,LOW(127)
00048c e030      	LDI  R19,LOW(0)
00048d c034      	RJMP _0x2000036
                 _0x2000035:
00048e 36e4      	CPI  R30,LOW(0x64)
00048f f011      	BREQ _0x2000039
000490 36e9      	CPI  R30,LOW(0x69)
000491 f411      	BRNE _0x200003A
                 _0x2000039:
000492 6004      	ORI  R16,LOW(4)
000493 c002      	RJMP _0x200003B
                 _0x200003A:
000494 37e5      	CPI  R30,LOW(0x75)
000495 f431      	BRNE _0x200003C
                 _0x200003B:
000496 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000497 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000498 83ee      	STD  Y+6,R30
000499 83ff      	STD  Y+6+1,R31
00049a e015      	LDI  R17,LOW(5)
00049b c00c      	RJMP _0x200003D
                 _0x200003C:
00049c 35e8      	CPI  R30,LOW(0x58)
00049d f411      	BRNE _0x200003F
00049e 6008      	ORI  R16,LOW(8)
00049f c003      	RJMP _0x2000040
                 _0x200003F:
0004a0 37e8      	CPI  R30,LOW(0x78)
0004a1 f009      	BREQ PC+2
0004a2 c0a1      	RJMP _0x2000071
                 _0x2000040:
0004a3 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0004a4 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0004a5 83ee      	STD  Y+6,R30
0004a6 83ff      	STD  Y+6+1,R31
0004a7 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0004a8 ff02      	SBRS R16,2
0004a9 c014      	RJMP _0x2000042
0004aa 940e 06d4 	CALL SUBOPT_0x17
0004ac 940e 06ea 	CALL SUBOPT_0x1A
0004ae 85ab      	LDD  R26,Y+11
0004af 23aa      	TST  R26
0004b0 f43a      	BRPL _0x2000043
0004b1 85ea      	LDD  R30,Y+10
0004b2 85fb      	LDD  R31,Y+10+1
0004b3 940e 0715 	CALL __ANEGW1
0004b5 87ea      	STD  Y+10,R30
0004b6 87fb      	STD  Y+10+1,R31
0004b7 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0004b8 3040      	CPI  R20,0
0004b9 f011      	BREQ _0x2000044
0004ba 5f1f      	SUBI R17,-LOW(1)
0004bb c001      	RJMP _0x2000045
                 _0x2000044:
0004bc 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0004bd c004      	RJMP _0x2000046
                 _0x2000042:
0004be 940e 06d4 	CALL SUBOPT_0x17
0004c0 940e 06ea 	CALL SUBOPT_0x1A
                 _0x2000046:
                 _0x2000036:
0004c2 fd00      	SBRC R16,0
0004c3 c011      	RJMP _0x2000047
                 _0x2000048:
0004c4 1715      	CP   R17,R21
0004c5 f478      	BRSH _0x200004A
0004c6 ff07      	SBRS R16,7
0004c7 c008      	RJMP _0x200004B
0004c8 ff02      	SBRS R16,2
0004c9 c004      	RJMP _0x200004C
0004ca 7f0b      	ANDI R16,LOW(251)
0004cb 2f24      	MOV  R18,R20
0004cc 5011      	SUBI R17,LOW(1)
0004cd c001      	RJMP _0x200004D
                 _0x200004C:
0004ce e320      	LDI  R18,LOW(48)
                 _0x200004D:
0004cf c001      	RJMP _0x200004E
                 _0x200004B:
0004d0 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0004d1 940e 06cd 	CALL SUBOPT_0x16
0004d3 5051      	SUBI R21,LOW(1)
0004d4 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0004d5 2f31      	MOV  R19,R17
0004d6 ff01      	SBRS R16,1
0004d7 c017      	RJMP _0x200004F
                 _0x2000050:
0004d8 3030      	CPI  R19,0
0004d9 f0a1      	BREQ _0x2000052
0004da ff03      	SBRS R16,3
0004db c006      	RJMP _0x2000053
0004dc 81ee      	LDD  R30,Y+6
0004dd 81ff      	LDD  R31,Y+6+1
0004de 9125      	LPM  R18,Z+
0004df 83ee      	STD  Y+6,R30
0004e0 83ff      	STD  Y+6+1,R31
0004e1 c005      	RJMP _0x2000054
                 _0x2000053:
0004e2 81ae      	LDD  R26,Y+6
0004e3 81bf      	LDD  R27,Y+6+1
0004e4 912d      	LD   R18,X+
0004e5 83ae      	STD  Y+6,R26
0004e6 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0004e7 940e 06cd 	CALL SUBOPT_0x16
0004e9 3050      	CPI  R21,0
0004ea f009      	BREQ _0x2000055
0004eb 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0004ec 5031      	SUBI R19,LOW(1)
0004ed cfea      	RJMP _0x2000050
                 _0x2000052:
0004ee c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0004ef e320      	LDI  R18,LOW(48)
0004f0 81ee      	LDD  R30,Y+6
0004f1 81ff      	LDD  R31,Y+6+1
0004f2 940e 0756 	CALL __GETW1PF
0004f4 87e8      	STD  Y+8,R30
0004f5 87f9      	STD  Y+8+1,R31
0004f6 81ee      	LDD  R30,Y+6
0004f7 81ff      	LDD  R31,Y+6+1
0004f8 9632      	ADIW R30,2
0004f9 83ee      	STD  Y+6,R30
0004fa 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0004fb 85e8      	LDD  R30,Y+8
0004fc 85f9      	LDD  R31,Y+8+1
0004fd 85aa      	LDD  R26,Y+10
0004fe 85bb      	LDD  R27,Y+10+1
0004ff 17ae      	CP   R26,R30
000500 07bf      	CPC  R27,R31
000501 f050      	BRLO _0x200005C
000502 5f2f      	SUBI R18,-LOW(1)
000503 85a8      	LDD  R26,Y+8
000504 85b9      	LDD  R27,Y+8+1
000505 85ea      	LDD  R30,Y+10
000506 85fb      	LDD  R31,Y+10+1
000507 1bea      	SUB  R30,R26
000508 0bfb      	SBC  R31,R27
000509 87ea      	STD  Y+10,R30
00050a 87fb      	STD  Y+10+1,R31
00050b cfef      	RJMP _0x200005A
                 _0x200005C:
00050c 332a      	CPI  R18,58
00050d f028      	BRLO _0x200005D
00050e ff03      	SBRS R16,3
00050f c002      	RJMP _0x200005E
000510 5f29      	SUBI R18,-LOW(7)
000511 c001      	RJMP _0x200005F
                 _0x200005E:
000512 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000513 fd04      	SBRC R16,4
000514 c01a      	RJMP _0x2000061
000515 3321      	CPI  R18,49
000516 f420      	BRSH _0x2000063
000517 85a8      	LDD  R26,Y+8
000518 85b9      	LDD  R27,Y+8+1
000519 9711      	SBIW R26,1
00051a f409      	BRNE _0x2000062
                 _0x2000063:
00051b c009      	RJMP _0x20000CD
                 _0x2000062:
00051c 1753      	CP   R21,R19
00051d f010      	BRLO _0x2000067
00051e ff00      	SBRS R16,0
00051f c001      	RJMP _0x2000068
                 _0x2000067:
000520 c013      	RJMP _0x2000066
                 _0x2000068:
000521 e220      	LDI  R18,LOW(32)
000522 ff07      	SBRS R16,7
000523 c00b      	RJMP _0x2000069
000524 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000525 6100      	ORI  R16,LOW(16)
000526 ff02      	SBRS R16,2
000527 c007      	RJMP _0x200006A
000528 7f0b      	ANDI R16,LOW(251)
000529 934a      	ST   -Y,R20
00052a 940e 06da 	CALL SUBOPT_0x18
00052c 3050      	CPI  R21,0
00052d f009      	BREQ _0x200006B
00052e 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00052f 940e 06cd 	CALL SUBOPT_0x16
000531 3050      	CPI  R21,0
000532 f009      	BREQ _0x200006C
000533 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000534 5031      	SUBI R19,LOW(1)
000535 85a8      	LDD  R26,Y+8
000536 85b9      	LDD  R27,Y+8+1
000537 9712      	SBIW R26,2
000538 f008      	BRLO _0x2000059
000539 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00053a ff00      	SBRS R16,0
00053b c008      	RJMP _0x200006D
                 _0x200006E:
00053c 3050      	CPI  R21,0
00053d f031      	BREQ _0x2000070
00053e 5051      	SUBI R21,LOW(1)
00053f e2e0      	LDI  R30,LOW(32)
000540 93ea      	ST   -Y,R30
000541 940e 06da 	CALL SUBOPT_0x18
000543 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000544 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000545 cee0      	RJMP _0x2000016
                 _0x2000018:
000546 85ac      	LDD  R26,Y+12
000547 85bd      	LDD  R27,Y+12+1
000548 940e 0752 	CALL __GETW1P
00054a 940e 076a 	CALL __LOADLOCR6
00054c 9664      	ADIW R28,20
00054d 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
00054e 92ff      	PUSH R15
00054f 2ef8      	MOV  R15,R24
000550 9726      	SBIW R28,6
000551 940e 0765 	CALL __SAVELOCR4
000553 940e 06f2 	CALL SUBOPT_0x1B
000555 9730      	SBIW R30,0
000556 f419      	BRNE _0x2000072
000557 efef      	LDI  R30,LOW(65535)
000558 efff      	LDI  R31,HIGH(65535)
000559 c023      	RJMP _0x20C0003
                 _0x2000072:
00055a 01de      	MOVW R26,R28
00055b 9616      	ADIW R26,6
00055c 940e 0711 	CALL __ADDW2R15
00055e 018d      	MOVW R16,R26
00055f 940e 06f2 	CALL SUBOPT_0x1B
000561 83ee      	STD  Y+6,R30
000562 83ff      	STD  Y+6+1,R31
000563 e0e0      	LDI  R30,LOW(0)
000564 87e8      	STD  Y+8,R30
000565 87e9      	STD  Y+8+1,R30
000566 01de      	MOVW R26,R28
000567 961a      	ADIW R26,10
000568 940e 0711 	CALL __ADDW2R15
00056a 940e 0752 	CALL __GETW1P
00056c 93fa      	ST   -Y,R31
00056d 93ea      	ST   -Y,R30
00056e 931a      	ST   -Y,R17
00056f 930a      	ST   -Y,R16
000570 eee0      	LDI  R30,LOW(_put_buff_G100)
000571 e0f3      	LDI  R31,HIGH(_put_buff_G100)
000572 93fa      	ST   -Y,R31
000573 93ea      	ST   -Y,R30
000574 01de      	MOVW R26,R28
000575 961a      	ADIW R26,10
000576 dea3      	RCALL __print_G100
000577 019f      	MOVW R18,R30
000578 81ae      	LDD  R26,Y+6
000579 81bf      	LDD  R27,Y+6+1
00057a e0e0      	LDI  R30,LOW(0)
00057b 93ec      	ST   X,R30
00057c 01f9      	MOVW R30,R18
                 _0x20C0003:
00057d 940e 076c 	CALL __LOADLOCR4
00057f 962a      	ADIW R28,10
000580 90ff      	POP  R15
000581 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000582 93ba      	ST   -Y,R27
000583 93aa      	ST   -Y,R26
000584 91a9          ld   r26,y+
000585 91b9          ld   r27,y+
000586 27ee          clr  r30
000587 27ff          clr  r31
                 strlen0:
000588 916d          ld   r22,x+
000589 2366          tst  r22
00058a f011          breq strlen1
00058b 9631          adiw r30,1
00058c cffb          rjmp strlen0
                 strlen1:
00058d 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00058e 93ba      	ST   -Y,R27
00058f 93aa      	ST   -Y,R26
000590 27aa          clr  r26
000591 27bb          clr  r27
000592 91e9          ld   r30,y+
000593 91f9          ld   r31,y+
                 strlenf0:
000594 9005      	lpm  r0,z+
000595 2000          tst  r0
000596 f011          breq strlenf1
000597 9611          adiw r26,1
000598 cffb          rjmp strlenf0
                 strlenf1:
000599 01fd          movw r30,r26
00059a 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G103:
                 ; .FSTART __lcd_write_nibble_G103
00059b 93aa      	ST   -Y,R26
00059c b3e8      	IN   R30,0x18
00059d 70ef      	ANDI R30,LOW(0xF)
00059e 2fae      	MOV  R26,R30
00059f 81e8      	LD   R30,Y
0005a0 7fe0      	ANDI R30,LOW(0xF0)
0005a1 2bea      	OR   R30,R26
0005a2 bbe8      	OUT  0x18,R30
                +
0005a3 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0005a4 958a     +DEC R24
0005a5 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0005a6 9ac2      	SBI  0x18,2
                +
0005a7 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0005a8 958a     +DEC R24
0005a9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0005aa 98c2      	CBI  0x18,2
                +
0005ab e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0005ac 958a     +DEC R24
0005ad f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0005ae c080      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0005af 93aa      	ST   -Y,R26
0005b0 81a8      	LD   R26,Y
0005b1 dfe9      	RCALL __lcd_write_nibble_G103
0005b2 81e8          ld    r30,y
0005b3 95e2          swap  r30
0005b4 83e8          st    y,r30
0005b5 81a8      	LD   R26,Y
0005b6 dfe4      	RCALL __lcd_write_nibble_G103
                +
0005b7 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
0005b8 958a     +DEC R24
0005b9 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
0005ba c074      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0005bb 93aa      	ST   -Y,R26
0005bc 81e8      	LD   R30,Y
0005bd e0f0      	LDI  R31,0
0005be 52e4      	SUBI R30,LOW(-__base_y_G103)
0005bf 4ffb      	SBCI R31,HIGH(-__base_y_G103)
0005c0 81e0      	LD   R30,Z
0005c1 81a9      	LDD  R26,Y+1
0005c2 0fae      	ADD  R26,R30
0005c3 dfeb      	RCALL __lcd_write_data
0005c4 80a9      	LDD  R10,Y+1
0005c5 81e8      	LD   R30,Y
0005c6 93e0 04e0 	STS  __lcd_y,R30
                 _0x20C0002:
0005c8 9622      	ADIW R28,2
0005c9 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0005ca e0a2      	LDI  R26,LOW(2)
0005cb 940e 06f9 	CALL SUBOPT_0x1C
0005cd e0ac      	LDI  R26,LOW(12)
0005ce dfe0      	RCALL __lcd_write_data
0005cf e0a1      	LDI  R26,LOW(1)
0005d0 940e 06f9 	CALL SUBOPT_0x1C
0005d2 e0e0      	LDI  R30,LOW(0)
0005d3 93e0 04e0 	STS  __lcd_y,R30
0005d5 2eae      	MOV  R10,R30
0005d6 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0005d7 93aa      	ST   -Y,R26
0005d8 81a8      	LD   R26,Y
0005d9 30aa      	CPI  R26,LOW(0xA)
0005da f021      	BREQ _0x2060005
0005db 91e0 04e1 	LDS  R30,__lcd_maxx
0005dd 16ae      	CP   R10,R30
0005de f060      	BRLO _0x2060004
                 _0x2060005:
0005df e0e0      	LDI  R30,LOW(0)
0005e0 93ea      	ST   -Y,R30
0005e1 91a0 04e0 	LDS  R26,__lcd_y
0005e3 5faf      	SUBI R26,-LOW(1)
0005e4 93a0 04e0 	STS  __lcd_y,R26
0005e6 dfd4      	RCALL _lcd_gotoxy
0005e7 81a8      	LD   R26,Y
0005e8 30aa      	CPI  R26,LOW(0xA)
0005e9 f409      	BRNE _0x2060007
0005ea c044      	RJMP _0x20C0001
                 _0x2060007:
                 _0x2060004:
0005eb 94a3      	INC  R10
0005ec 9ac0      	SBI  0x18,0
0005ed 81a8      	LD   R26,Y
0005ee dfc0      	RCALL __lcd_write_data
0005ef 98c0      	CBI  0x18,0
0005f0 c03e      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0005f1 93ba      	ST   -Y,R27
0005f2 93aa      	ST   -Y,R26
0005f3 931a      	ST   -Y,R17
                 _0x2060008:
0005f4 81a9      	LDD  R26,Y+1
0005f5 81ba      	LDD  R27,Y+1+1
0005f6 91ed      	LD   R30,X+
0005f7 83a9      	STD  Y+1,R26
0005f8 83ba      	STD  Y+1+1,R27
0005f9 2f1e      	MOV  R17,R30
0005fa 30e0      	CPI  R30,0
0005fb f019      	BREQ _0x206000A
0005fc 2fa1      	MOV  R26,R17
0005fd dfd9      	RCALL _lcd_putchar
0005fe cff5      	RJMP _0x2060008
                 _0x206000A:
0005ff 8118      	LDD  R17,Y+0
000600 9623      	ADIW R28,3
000601 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000602 93aa      	ST   -Y,R26
000603 b3e7      	IN   R30,0x17
000604 6fe0      	ORI  R30,LOW(0xF0)
000605 bbe7      	OUT  0x17,R30
000606 9aba      	SBI  0x17,2
000607 9ab8      	SBI  0x17,0
000608 9ab9      	SBI  0x17,1
000609 98c2      	CBI  0x18,2
00060a 98c0      	CBI  0x18,0
00060b 98c1      	CBI  0x18,1
00060c 81e8      	LD   R30,Y
00060d 93e0 04e1 	STS  __lcd_maxx,R30
00060f 58e0      	SUBI R30,-LOW(128)
                +
000610 93e0 04de+STS __base_y_G103 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G103,2
000612 81e8      	LD   R30,Y
000613 54e0      	SUBI R30,-LOW(192)
                +
000614 93e0 04df+STS __base_y_G103 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G103,3
000616 e1a4      	LDI  R26,LOW(20)
000617 e0b0      	LDI  R27,0
000618 940e 0707 	CALL _delay_ms
00061a 940e 06ff 	CALL SUBOPT_0x1D
00061c 940e 06ff 	CALL SUBOPT_0x1D
00061e 940e 06ff 	CALL SUBOPT_0x1D
000620 e2a0      	LDI  R26,LOW(32)
000621 df79      	RCALL __lcd_write_nibble_G103
                +
000622 ec88     +LDI R24 , LOW ( 200 )
000623 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000624 9701     +SBIW R24 , 1
000625 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000626 e2a8      	LDI  R26,LOW(40)
000627 df87      	RCALL __lcd_write_data
000628 e0a4      	LDI  R26,LOW(4)
000629 df85      	RCALL __lcd_write_data
00062a e8a5      	LDI  R26,LOW(133)
00062b df83      	RCALL __lcd_write_data
00062c e0a6      	LDI  R26,LOW(6)
00062d df81      	RCALL __lcd_write_data
00062e df9b      	RCALL _lcd_clear
                 _0x20C0001:
00062f 9621      	ADIW R28,1
000630 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _is_full:
000261           	.BYTE 0x7
                 _in_que:
000268           	.BYTE 0x6
                 _que_1to5:
00026e           	.BYTE 0xC8
                 _que_6:
000336           	.BYTE 0xC8
                 _que_7:
0003fe           	.BYTE 0xC8
                 _is_timeContinue:
0004c6           	.BYTE 0x2
                 _lcd_buffer:
0004c8           	.BYTE 0x10
                 __seed_G102:
0004d8           	.BYTE 0x4
                 __base_y_G103:
0004dc           	.BYTE 0x4
                 __lcd_y:
0004e0           	.BYTE 0x1
                 __lcd_maxx:
0004e1           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x0:
000631 91e0 04c6 	LDS  R30,_is_timeContinue
000633 91f0 04c7 	LDS  R31,_is_timeContinue+1
000635 9730      	SBIW R30,0
000636 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000637 01f6      	MOVW R30,R12
000638 9631      	ADIW R30,1
000639 016f      	MOVW R12,R30
00063a 9731      	SBIW R30,1
00063b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x2:
00063c 91a0 0268 	LDS  R26,_in_que
00063e 91b0 0269 	LDS  R27,_in_que+1
000640 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000641 e6a8      	LDI  R26,LOW(_in_que)
000642 e0b2      	LDI  R27,HIGH(_in_que)
000643 91ed      	LD   R30,X+
000644 91fd      	LD   R31,X+
000645 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
000646 93fa      	ST   -Y,R31
000647 93ea      	ST   -Y,R30
000648 01d6      	MOVW R26,R12
000649 940c 022c 	JMP  _push_to_que
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
00064b 91ed      	LD   R30,X+
00064c 91fd      	LD   R31,X+
00064d 9631      	ADIW R30,1
00064e 93fe      	ST   -X,R31
00064f 93ee      	ST   -X,R30
000650 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x6:
000651 dfea      	RCALL SUBOPT_0x2
000652 940e 075f 	CALL __CPW02
000654 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:25 WORDS
                 SUBOPT_0x7:
000655 9731      	SBIW R30,1
000656 93fe      	ST   -X,R31
000657 93ee      	ST   -X,R30
000658 e6ae      	LDI  R26,LOW(_que_1to5)
000659 e0b2      	LDI  R27,HIGH(_que_1to5)
00065a 940e 0247 	CALL _pop_from_que
00065c 93fa      	ST   -Y,R31
00065d 93ea      	ST   -Y,R30
00065e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x8:
00065f e0b0      	LDI  R27,0
000660 940e 033b 	CALL _LCD_Goto_Counter
000662 e0e1      	LDI  R30,LOW(1)
000663 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
000664 93ba      	ST   -Y,R27
000665 93aa      	ST   -Y,R26
000666 931a      	ST   -Y,R17
000667 930a      	ST   -Y,R16
                +
000668 e000     +LDI R16 , LOW ( 0 )
000669 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                +
00066a e000     +LDI R16 , LOW ( 0 )
00066b e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00066c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
00066d 01f8      	MOVW R30,R16
00066e 81ac      	LDD  R26,Y+4
00066f 81bd      	LDD  R27,Y+4+1
000670 0fee      	LSL  R30
000671 1fff      	ROL  R31
000672 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
000673 ece8      	LDI  R30,LOW(_lcd_buffer)
000674 e0f4      	LDI  R31,HIGH(_lcd_buffer)
000675 93fa      	ST   -Y,R31
000676 93ea      	ST   -Y,R30
000677 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
000678 940e 0719 	CALL __CWD1
00067a 940e 075a 	CALL __PUTPARD1
00067c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0xD:
00067d e0e0      	LDI  R30,LOW(0)
00067e 93ea      	ST   -Y,R30
00067f e0a0      	LDI  R26,LOW(0)
000680 940e 05bb 	CALL _lcd_gotoxy
000682 eca8      	LDI  R26,LOW(_lcd_buffer)
000683 e0b4      	LDI  R27,HIGH(_lcd_buffer)
000684 940c 05f1 	JMP  _lcd_puts
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:51 WORDS
                 SUBOPT_0xE:
000686 93fa      	ST   -Y,R31
000687 93ea      	ST   -Y,R30
000688 e0e8      	LDI  R30,LOW(8)
000689 e0f0      	LDI  R31,HIGH(8)
00068a 93fa      	ST   -Y,R31
00068b 93ea      	ST   -Y,R30
00068c e0e6      	LDI  R30,LOW(6)
00068d e0f0      	LDI  R31,HIGH(6)
00068e 93fa      	ST   -Y,R31
00068f 93ea      	ST   -Y,R30
000690 e0e4      	LDI  R30,LOW(4)
000691 e0f0      	LDI  R31,HIGH(4)
000692 93fa      	ST   -Y,R31
000693 93ea      	ST   -Y,R30
000694 e0ab      	LDI  R26,LOW(11)
000695 e0b0      	LDI  R27,HIGH(11)
000696 940e 02c9 	CALL _time_after
000698 940c 05ca 	JMP  _lcd_clear
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00069a 93ba      	ST   -Y,R27
00069b 93aa      	ST   -Y,R26
00069c 940e 05ca 	CALL _lcd_clear
00069e cfd4      	RJMP SUBOPT_0xB
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x10:
00069f e084      	LDI  R24,4
0006a0 940e 054e 	CALL _sprintf
0006a2 9628      	ADIW R28,8
0006a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
0006a4 93fa      	ST   -Y,R31
0006a5 93ea      	ST   -Y,R30
0006a6 81ec      	LDD  R30,Y+4
0006a7 81fd      	LDD  R31,Y+4+1
0006a8 cfcf      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x12:
0006a9 e0e0      	LDI  R30,LOW(0)
0006aa 93ea      	ST   -Y,R30
0006ab e0a1      	LDI  R26,LOW(1)
0006ac 940e 05bb 	CALL _lcd_gotoxy
0006ae eca8      	LDI  R26,LOW(_lcd_buffer)
0006af e0b4      	LDI  R27,HIGH(_lcd_buffer)
0006b0 940e 05f1 	CALL _lcd_puts
0006b2 eba8      	LDI  R26,LOW(3000)
0006b3 e0bb      	LDI  R27,HIGH(3000)
0006b4 940e 0707 	CALL _delay_ms
0006b6 ebe8      	LDI  R30,LOW(3000)
0006b7 e0fb      	LDI  R31,HIGH(3000)
0006b8 cfcd      	RJMP SUBOPT_0xE
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x13:
0006b9 93fa      	ST   -Y,R31
0006ba 93ea      	ST   -Y,R30
0006bb e080      	LDI  R24,0
0006bc 940e 054e 	CALL _sprintf
0006be 9624      	ADIW R28,4
0006bf e0e0      	LDI  R30,LOW(0)
0006c0 93ea      	ST   -Y,R30
0006c1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0006c2 b3e3      	IN   R30,0x13
0006c3 70e7      	ANDI R30,LOW(0x7)
0006c4 2f0e      	MOV  R16,R30
0006c5 3007      	CPI  R16,7
0006c6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
0006c7 2fe0      	MOV  R30,R16
0006c8 e0f0      	LDI  R31,0
0006c9 30e6      	CPI  R30,LOW(0x6)
0006ca e0a0      	LDI  R26,HIGH(0x6)
0006cb 07fa      	CPC  R31,R26
0006cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x16:
0006cd 932a      	ST   -Y,R18
0006ce 85ad      	LDD  R26,Y+13
0006cf 85be      	LDD  R27,Y+13+1
0006d0 85ef      	LDD  R30,Y+15
0006d1 89f8      	LDD  R31,Y+15+1
0006d2 9509      	ICALL
0006d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x17:
0006d4 89e8      	LDD  R30,Y+16
0006d5 89f9      	LDD  R31,Y+16+1
0006d6 9734      	SBIW R30,4
0006d7 8be8      	STD  Y+16,R30
0006d8 8bf9      	STD  Y+16+1,R31
0006d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x18:
0006da 85ad      	LDD  R26,Y+13
0006db 85be      	LDD  R27,Y+13+1
0006dc 85ef      	LDD  R30,Y+15
0006dd 89f8      	LDD  R31,Y+15+1
0006de 9509      	ICALL
0006df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x19:
0006e0 89a8      	LDD  R26,Y+16
0006e1 89b9      	LDD  R27,Y+16+1
0006e2 9614      	ADIW R26,4
0006e3 940e 0752 	CALL __GETW1P
0006e5 83ee      	STD  Y+6,R30
0006e6 83ff      	STD  Y+6+1,R31
0006e7 81ae      	LDD  R26,Y+6
0006e8 81bf      	LDD  R27,Y+6+1
0006e9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1A:
0006ea 89a8      	LDD  R26,Y+16
0006eb 89b9      	LDD  R27,Y+16+1
0006ec 9614      	ADIW R26,4
0006ed 940e 0752 	CALL __GETW1P
0006ef 87ea      	STD  Y+10,R30
0006f0 87fb      	STD  Y+10+1,R31
0006f1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1B:
0006f2 01de      	MOVW R26,R28
0006f3 961c      	ADIW R26,12
0006f4 940e 0711 	CALL __ADDW2R15
0006f6 940e 0752 	CALL __GETW1P
0006f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1C:
0006f9 940e 05af 	CALL __lcd_write_data
0006fb e0a3      	LDI  R26,LOW(3)
0006fc e0b0      	LDI  R27,0
0006fd 940c 0707 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x1D:
0006ff e3a0      	LDI  R26,LOW(48)
000700 940e 059b 	CALL __lcd_write_nibble_G103
                +
000702 ec88     +LDI R24 , LOW ( 200 )
000703 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000704 9701     +SBIW R24 , 1
000705 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000706 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000707 9610      	adiw r26,0
000708 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000709 ed80     +LDI R24 , LOW ( 0x7D0 )
00070a e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
00070b 9701     +SBIW R24 , 1
00070c f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00070d 95a8      	wdr
00070e 9711      	sbiw r26,1
00070f f7c9      	brne __delay_ms0
                 __delay_ms1:
000710 9508      	ret
                 
                 __ADDW2R15:
000711 2400      	CLR  R0
000712 0daf      	ADD  R26,R15
000713 1db0      	ADC  R27,R0
000714 9508      	RET
                 
                 __ANEGW1:
000715 95f1      	NEG  R31
000716 95e1      	NEG  R30
000717 40f0      	SBCI R31,0
000718 9508      	RET
                 
                 __CWD1:
000719 2f6f      	MOV  R22,R31
00071a 0f66      	ADD  R22,R22
00071b 0b66      	SBC  R22,R22
00071c 2f76      	MOV  R23,R22
00071d 9508      	RET
                 
                 __DIVW21U:
00071e 2400      	CLR  R0
00071f 2411      	CLR  R1
000720 e190      	LDI  R25,16
                 __DIVW21U1:
000721 0faa      	LSL  R26
000722 1fbb      	ROL  R27
000723 1c00      	ROL  R0
000724 1c11      	ROL  R1
000725 1a0e      	SUB  R0,R30
000726 0a1f      	SBC  R1,R31
000727 f418      	BRCC __DIVW21U2
000728 0e0e      	ADD  R0,R30
000729 1e1f      	ADC  R1,R31
00072a c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00072b 60a1      	SBR  R26,1
                 __DIVW21U3:
00072c 959a      	DEC  R25
00072d f799      	BRNE __DIVW21U1
00072e 01fd      	MOVW R30,R26
00072f 01d0      	MOVW R26,R0
000730 9508      	RET
                 
                 __DIVW21:
000731 d012      	RCALL __CHKSIGNW
000732 dfeb      	RCALL __DIVW21U
000733 f40e      	BRTC __DIVW211
000734 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000735 9508      	RET
                 
                 __MODW21:
000736 94e8      	CLT
000737 ffb7      	SBRS R27,7
000738 c004      	RJMP __MODW211
000739 95a0      	COM  R26
00073a 95b0      	COM  R27
00073b 9611      	ADIW R26,1
00073c 9468      	SET
                 __MODW211:
00073d fdf7      	SBRC R31,7
00073e dfd6      	RCALL __ANEGW1
00073f dfde      	RCALL __DIVW21U
000740 01fd      	MOVW R30,R26
000741 f40e      	BRTC __MODW212
000742 dfd2      	RCALL __ANEGW1
                 __MODW212:
000743 9508      	RET
                 
                 __CHKSIGNW:
000744 94e8      	CLT
000745 fff7      	SBRS R31,7
000746 c002      	RJMP __CHKSW1
000747 dfcd      	RCALL __ANEGW1
000748 9468      	SET
                 __CHKSW1:
000749 ffb7      	SBRS R27,7
00074a c006      	RJMP __CHKSW2
00074b 95a0      	COM  R26
00074c 95b0      	COM  R27
00074d 9611      	ADIW R26,1
00074e f800      	BLD  R0,0
00074f 9403      	INC  R0
000750 fa00      	BST  R0,0
                 __CHKSW2:
000751 9508      	RET
                 
                 __GETW1P:
000752 91ed      	LD   R30,X+
000753 91fc      	LD   R31,X
000754 9711      	SBIW R26,1
000755 9508      	RET
                 
                 __GETW1PF:
000756 9005      	LPM  R0,Z+
000757 91f4      	LPM  R31,Z
000758 2de0      	MOV  R30,R0
000759 9508      	RET
                 
                 __PUTPARD1:
00075a 937a      	ST   -Y,R23
00075b 936a      	ST   -Y,R22
00075c 93fa      	ST   -Y,R31
00075d 93ea      	ST   -Y,R30
00075e 9508      	RET
                 
                 __CPW02:
00075f 2400      	CLR  R0
000760 160a      	CP   R0,R26
000761 060b      	CPC  R0,R27
000762 9508      	RET
                 
                 __SAVELOCR6:
000763 935a      	ST   -Y,R21
                 __SAVELOCR5:
000764 934a      	ST   -Y,R20
                 __SAVELOCR4:
000765 933a      	ST   -Y,R19
                 __SAVELOCR3:
000766 932a      	ST   -Y,R18
                 __SAVELOCR2:
000767 931a      	ST   -Y,R17
000768 930a      	ST   -Y,R16
000769 9508      	RET
                 
                 __LOADLOCR6:
00076a 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00076b 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00076c 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00076d 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00076e 8119      	LDD  R17,Y+1
00076f 8108      	LD   R16,Y
000770 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  26 r1 :   7 r2 :   0 r3 :   0 r4 :   1 r5 :   0 r6 :   2 r7 :   1 
r8 :   3 r9 :   2 r10:   4 r11:   2 r12:   6 r13:   3 r14:   0 r15:   6 
r16:  65 r17:  61 r18:  36 r19:  18 r20:   9 r21:  17 r22:  13 r23:   4 
r24:  27 r25:   9 r26: 211 r27:  98 r28:  20 r29:   1 r30: 379 r31: 150 
x  :  50 y  : 284 z  :  17 
Registers used: 31 out of 35 (88.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   9 add   :  13 
adiw  :  35 and   :   0 andi  :   7 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  26 
brge  :  10 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   1 brmi  :   1 brne  :  59 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  : 160 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :  10 cpc   :  25 cpi   :  59 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   2 jmp   :  27 ld    :  52 ldd   : 114 ldi   : 260 
lds   :  16 lpm   :  14 lsl   :   3 lsr   :   0 mov   :  34 movw  :  34 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   9 out   :  32 pop   :   1 push  :   1 rcall :  35 ret   :  50 
reti  :   2 rjmp  : 100 rol   :   5 ror   :   0 sbc   :   3 sbci  :   5 
sbi   :   9 sbic  :   0 sbis  :   1 sbiw  :  28 sbr   :   1 sbrc  :   3 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    : 138 std   :  35 sts   :  24 sub   :   2 subi  :  22 swap  :   1 
tst   :   6 wdr   :   1 
Instructions used: 68 out of 116 (58.6%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000ee2   3584    226   3810   32768  11.6%
[.dseg] 0x000060 0x0004e2      0    642    642    2048  31.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 13 warnings
