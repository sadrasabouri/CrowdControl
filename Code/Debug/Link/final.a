;#include <io.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <string.h>
;#include <stdlib.h>
;#include <alcd.h>
;#include <mega32.h>
;
;#define ONE_SEC 1000
;#define SHOW_DELAY 3000
;int second = 0;
;int minute = 30;
;int hour = 7;
;char is_AM = 1;
;
;//   fo Counter    1, 2, 3, 4, 5, 6, 7
;char is_full[7] = {0, 0, 0, 0, 0, 0, 0};
;//   fo Counter 1-5, 6, 7
;int in_que[3] = {0 , 0, 0};
;int client_index = 1;
;int is_timeContinue = 1;

	.DSEG
;
;void time_after(int, int*, int*, int*, char*);
;int give_first_empty(char*, int);
;void LCD_Goto_Counter (int, int);
;void LCD_Show_Waiting (int);
;void LCD_Out_Of_Time();
;char GetKey();
;
;// Timer Interrupt - NOT WORKING
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021     // Reinitialize Timer1 Value
; 0000 0022     TCNT1H = 0x85EE >> 8;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0023     TCNT1L = 0x85EE & 0xff;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0024 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;// External Interrupt 0
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 0028 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0029     char key;
; 0000 002A     int empt_counter_idx;
; 0000 002B     key = GetKey();
;PCODE: $00000018 VOL: 0
;	key -> R17
;	empt_counter_idx -> R18,R19
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002C     GICR |= (1 << INTF0);   //  Enalbe Interrupt Flag
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002D     if(key != 0xFF) // dokme feshorde shod
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002E     {
; 0000 002F         if (!is_AM)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0030             if (hour > 1 || (hour == 1 && minute >= 30 ))
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0031                 is_timeContinue = 0;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0032 
; 0000 0033         switch(key)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0034         {
; 0000 0035             case 1:
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0036                 if (is_timeContinue)
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0037                 {
; 0000 0038                     empt_counter_idx = give_first_empty(is_full, 5);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0039                     if (empt_counter_idx != -1)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 003A                     {
; 0000 003B                         is_full[empt_counter_idx] = 1;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 003C                         LCD_Goto_Counter(client_index, empt_counter_idx + 1);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003D                     }
; 0000 003E                     else // All Counters are full
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 003F                     {
; 0000 0040                         LCD_Show_Waiting(in_que[0]);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0041                         in_que[0]++;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0042                     }
;PCODE: $00000054 VOL: 0
; 0000 0043                 }
; 0000 0044                 else    //  Running out of time
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0045                     LCD_Out_Of_Time();
;PCODE: $00000057 VOL: 0
; 0000 0046                 break;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0047 
; 0000 0048             // case 2:
; 0000 0049             //     if(is_timeContinue)
; 0000 004A             //     {
; 0000 004B             //         TotalCount += 1;
; 0000 004C             //         totalcount6 += 1;
; 0000 004D             //         if(!Counter6)
; 0000 004E             //         {
; 0000 004F             //             Counter6 = 1;
; 0000 0050             //             turn6 += 1;
; 0000 0051             //             LCD_Goto_Counter(turn6, 6);
; 0000 0052             //         }
; 0000 0053             //         else
; 0000 0054             //         {
; 0000 0055             //             int entezar6 = totalcount6 - turn6;
; 0000 0056             //             LCD_Show_Waiting(entezar6);
; 0000 0057             //         }
; 0000 0058             //     }
; 0000 0059             //     else
; 0000 005A             //         LCD_Out_Of_Time();
; 0000 005B             //     break;
; 0000 005C 
; 0000 005D             // case 3:
; 0000 005E             //     if(is_timeContinue)
; 0000 005F             //     {
; 0000 0060             //         TotalCount += 1;
; 0000 0061             //         totalcount7 += 1;
; 0000 0062             //         if(Counter7 == 0){
; 0000 0063             //             Counter7 = 1;
; 0000 0064             //             turn7 += 1;
; 0000 0065             //             LCD_Goto_Counter(turn7, 7);
; 0000 0066             //         }
; 0000 0067             //         else
; 0000 0068             //         {
; 0000 0069             //             int entezar7 = totalcount7 - turn7;
; 0000 006A             //             LCD_Show_Waiting(entezar7);
; 0000 006B             //         }
; 0000 006C             //     }
; 0000 006D             //     else
; 0000 006E             //         LCD_Out_Of_Time();
; 0000 006F             //     break;
; 0000 0070 
; 0000 0071             case 9: // Counter1
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0072                 is_full[0] = 0;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0073                 if (in_que[0] > 0)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0074                 {
; 0000 0075                     in_que[0]--;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0076                     LCD_Goto_Counter(0, 1);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0077                     is_full[0] = 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0078                 }
; 0000 0079                 break;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 007A 
; 0000 007B             // case 8: // Counter2
; 0000 007C             //     Counter2 = 0;
; 0000 007D             //     if (totalcount1_5 > turn1_5)
; 0000 007E             //     {
; 0000 007F             //         d2 = turn1_5 + 1;
; 0000 0080             //         LCD_Goto_Counter(d2, 2);
; 0000 0081             //         Counter2 = 1;
; 0000 0082             //         turn1_5 += 1;
; 0000 0083             //     }
; 0000 0084             //     break;
; 0000 0085 
; 0000 0086             // case 7: // Counter3
; 0000 0087             //     Counter3 = 0;
; 0000 0088             //     if (totalcount1_5 > turn1_5)
; 0000 0089             //     {
; 0000 008A             //         d3 = turn1_5 + 1;
; 0000 008B             //         LCD_Goto_Counter(d3, 3);
; 0000 008C             //         Counter3 = 1;
; 0000 008D             //         turn1_5 += 1;
; 0000 008E             //     }
; 0000 008F             //     break;
; 0000 0090             // case 6: // Counter4
; 0000 0091             //     Counter4 = 0;
; 0000 0092             //     if (totalcount1_5 > turn1_5)
; 0000 0093             //     {
; 0000 0094             //         d4 = turn1_5 + 1;
; 0000 0095             //         LCD_Goto_Counter(d4, 4) ;
; 0000 0096             //         Counter4 = 1;
; 0000 0097             //         turn1_5 += 1;
; 0000 0098             //     }
; 0000 0099             //     break;
; 0000 009A             // case 5: // Counter5
; 0000 009B             //     Counter5 = 0;
; 0000 009C             //     if (totalcount1_5 > turn1_5)
; 0000 009D             //     {
; 0000 009E             //         d5 = turn1_5 + 1;
; 0000 009F             //         LCD_Goto_Counter(d5, 5);
; 0000 00A0             //         Counter5 = 1;
; 0000 00A1             //         turn1_5 += 1;
; 0000 00A2             //     }
; 0000 00A3             //     break;
; 0000 00A4             // case 4: // Counter6
; 0000 00A5             //     Counter6 = 0;
; 0000 00A6             //     if (totalcount6 > turn6)
; 0000 00A7             //     {
; 0000 00A8             //         d6 = turn6 + 1;
; 0000 00A9             //         LCD_Goto_Counter(d6, 6);
; 0000 00AA             //         Counter6 = 1;
; 0000 00AB             //         turn6 += 1;
; 0000 00AC             //     }
; 0000 00AD             //     break;
; 0000 00AE             // case 0: // Counter7
; 0000 00AF             //     Counter7 = 0;
; 0000 00B0             //     if (totalcount7 > turn7)
; 0000 00B1             //     {
; 0000 00B2             //         d7 = turn7 + 1;
; 0000 00B3             //         LCD_Goto_Counter(d7, 7);
; 0000 00B4             //         Counter7 = 1;
; 0000 00B5             //         turn7 += 1;
; 0000 00B6             //     }
; 0000 00B7             //     break;
; 0000 00B8         }
;PCODE: $0000006F VOL: 0
; 0000 00B9     }
; 0000 00BA }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;
;void main(void)
; 0000 00BE {
;PCODE: $00000076 VOL: 0
; 0000 00BF     char* lcd_buffer = "";
; 0000 00C0 
; 0000 00C1     DDRB = 0xFF;    //  Port B as output - To LCD
;	*lcd_buffer -> R16,R17
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 00C2     PORTB = 0x00;   //  Initialize it by 0000_0000
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C3     DDRC = 0xF0;    //  Port C as half input half output - From Keypad
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C4     PORTC = 0x0F;   //  Initialize it by 0000_1111
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00C5 
; 0000 00C6     // External Interrupt(s) initialization
; 0000 00C7     // INT0: On
; 0000 00C8     // INT0 Mode: Falling Edge
; 0000 00C9     // INT1: Off
; 0000 00CA     // INT2: Off
; 0000 00CB     GICR |= (0<<INT1) | (1<<INT0) | (0<<INT2);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00CC     MCUCR = (0<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00CD     MCUCSR = (0<<ISC2);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00CE     GIFR = (0<<INTF1) | (1<<INTF0) | (0<<INTF2);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00CF 
; 0000 00D0     // Timer/Counter 1 initialization
; 0000 00D1     // Clock source: System Clock
; 0000 00D2     // Clock value: 31/250 kHz
; 0000 00D3     // Mode: Normal top=0xFFFF
; 0000 00D4     // OC1A output: Disconnected
; 0000 00D5     // OC1B output: Disconnected
; 0000 00D6     // Noise Canceler: Off
; 0000 00D7     // Input Capture on Falling Edge
; 0000 00D8     // Timer Period: 1 s
; 0000 00D9     // Timer1 Overflow Interrupt: On
; 0000 00DA     // Input Capture Interrupt: Off
; 0000 00DB     // Compare A Match Interrupt: Off
; 0000 00DC     // Compare B Match Interrupt: Off
; 0000 00DD     TCCR1A = (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00DE     TCCR1B = (0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00DF     TCNT1H = 0x85;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00E0     TCNT1L = 0xEE;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00E1     ICR1H = 0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00E2     ICR1L = 0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00E3     OCR1AH = 0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00E4     OCR1AL = 0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00E5     OCR1BH = 0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00E6     OCR1BL = 0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00E7 
; 0000 00E8     // Global Enable Interrupts
; 0000 00E9     #asm("sei")
;PCODE: $0000009F VOL: 0
	sei
;PCODE: $000000A0 VOL: 0
; 0000 00EA 
; 0000 00EB     is_full[0] = 0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00EC     is_full[1] = 0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00ED     is_full[2] = 0;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00EE     is_full[3] = 0;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00EF     is_full[4] = 0;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00F0     is_full[5] = 0;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00F1     is_full[6] = 0;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00F2 
; 0000 00F3     in_que[0] = 0;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F4     in_que[0] = 0;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F5     in_que[0] = 0;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F6     lcd_init(16);
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00F7 
; 0000 00F8     while (1)
;PCODE: $000000BD VOL: 0
; 0000 00F9     {
; 0000 00FA         if (!is_AM)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00FB             sprintf(lcd_buffer,"   %02d:%02d:%02d  PM", hour, minute, second);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00FC         else
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00FD             sprintf(lcd_buffer,"   %02d:%02d:%02d  AM", is_full[0], in_que[0], second);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00FE         lcd_gotoxy(0,0);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00FF         lcd_puts(lcd_buffer);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0100         delay_ms(ONE_SEC);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0101         //time_after(ONE_SEC, &hour, &minute, &second, &is_AM);
; 0000 0102         lcd_clear();
;PCODE: $000000ED VOL: 0
; 0000 0103     }
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 0104 }
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0

	.DSEG
_0x15:
	.BYTE 0x1
;
;void time_after(int n, int* pthour, int* ptminute, int* ptsecond, char* ptis_AM)
; 0000 0107 {

	.CSEG
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 0108     unsigned char second = *ptsecond;
; 0000 0109     unsigned char minute = *ptminute;
; 0000 010A     unsigned char hour = *pthour;
; 0000 010B 
; 0000 010C     n = n / ONE_SEC;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;	n -> Y+12
;	*pthour -> Y+10
;	*ptminute -> Y+8
;	*ptsecond -> Y+6
;	*ptis_AM -> Y+4
;	second -> R17
;	minute -> R16
;	hour -> R19
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 010D     second += n;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010E     if (second > 59)
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 010F     {
; 0000 0110         minute += 1;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 0111         second = second % 60;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0112     }
; 0000 0113     if (minute > 59)
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0114     {
; 0000 0115         hour += 1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0116         minute = minute % 60;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0117     }
; 0000 0118     if (hour > 12)
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0119     {
; 0000 011A         hour = hour % 12;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 011B         *ptis_AM = *ptis_AM ? 0 : 1;    //  is_AM = ~is_AM
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 011C     }
; 0000 011D 
; 0000 011E     *ptsecond = second;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 011F     *ptminute = minute;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0120     *pthour = hour;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 0121 }
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;
;int give_first_empty(char* is_full, int to)
; 0000 0124 {
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0125     int i = 0;
; 0000 0126     for (i = 0; i < to; ++i)
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;	*is_full -> Y+4
;	to -> Y+2
;	i -> R16,R17
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0127     {
; 0000 0128         if (!is_full[i])
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0129             return i;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 012A     }
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 012B     return -1;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 012C }
;PCODE: $0000016C VOL: 0
;
;void LCD_Goto_Counter(int clinet_number, int counter_number)
; 0000 012F {
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0130     char* tmp_buffer = "";
; 0000 0131 
; 0000 0132     lcd_clear();
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;	clinet_number -> Y+4
;	counter_number -> Y+2
;	*tmp_buffer -> R16,R17
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0133 
; 0000 0134     sprintf(tmp_buffer,"   Client #%03d   ", clinet_number);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 0135     lcd_gotoxy(0, 0);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0136     lcd_puts(tmp_buffer);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 0137 
; 0000 0138     sprintf(tmp_buffer,"Go To Counter#%02d!", counter_number);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0139     lcd_gotoxy(0, 1);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 013A     lcd_puts(tmp_buffer);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 013B 
; 0000 013C     delay_ms(SHOW_DELAY);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 013D     time_after(SHOW_DELAY, &hour, &minute, &second, &is_AM);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 013E     lcd_clear();
;PCODE: $000001A4 VOL: 0
; 0000 013F }
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0

	.DSEG
_0x26:
	.BYTE 0x1
;
;void LCD_Show_Waiting(int togo_number)
; 0000 0142 {

	.CSEG
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0143     char* tmp_buffer = "";
; 0000 0144 
; 0000 0145     lcd_clear();
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;	togo_number -> Y+2
;	*tmp_buffer -> R16,R17
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0000 0146 
; 0000 0147     sprintf(tmp_buffer," %3d Client(s) ", togo_number);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0148     lcd_gotoxy(0, 0);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0149     lcd_puts(tmp_buffer);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 014A 
; 0000 014B     sprintf(tmp_buffer,"   Before You   ", togo_number);
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0000 014C     lcd_gotoxy(0, 1);
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 014D     lcd_puts(tmp_buffer);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 014E 
; 0000 014F     delay_ms(SHOW_DELAY);
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0150     time_after(SHOW_DELAY, &hour, &minute, &second, &is_AM);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 0151     lcd_clear();
;PCODE: $000001E3 VOL: 0
; 0000 0152 }
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0

	.DSEG
_0x27:
	.BYTE 0x1
;
;void LCD_Out_Of_Time()
; 0000 0155 {

	.CSEG
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0156     char* tmp_buffer = "";
; 0000 0157 
; 0000 0158     lcd_clear();
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;	*tmp_buffer -> R16,R17
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0159 
; 0000 015A     sprintf(tmp_buffer,"    Sorry :(    ");
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 015B     lcd_gotoxy(0, 0);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 015C     lcd_puts(tmp_buffer);
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 015D 
; 0000 015E     sprintf(tmp_buffer,"  Time's Over!  ");
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 015F     lcd_gotoxy(0, 1);
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0160     lcd_puts(tmp_buffer);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 0161 
; 0000 0162     delay_ms(SHOW_DELAY);
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 0163     time_after(SHOW_DELAY, &hour, &minute, &second, &is_AM);
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0164     lcd_clear();
;PCODE: $0000021B VOL: 0
; 0000 0165 }
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0

	.DSEG
_0x28:
	.BYTE 0x1
;
;char GetKey()
; 0000 0168 {

	.CSEG
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0169     unsigned char key_code = 0xFF;
; 0000 016A     unsigned char columns;
; 0000 016B 
; 0000 016C     PORTC = 0xFF;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;	key_code -> R17
;	columns -> R16
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 016D 
; 0000 016E     // First Row
; 0000 016F     PORTC.4 = 0;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 0170     columns = PINC & 0x07;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0171     if(columns != 0x07)
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0172     {
; 0000 0173     switch(columns)
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 0174         {
; 0000 0175         case 0b110 : key_code = 1; break;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0176         case 0b101 : key_code = 2; break;
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0177         case 0b011 : key_code = 3; break;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0178         }
;PCODE: $00000242 VOL: 0
; 0000 0179     }
; 0000 017A     PORTC.4 = 1;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 017B 
; 0000 017C     // Second Row
; 0000 017D     PORTC.5 = 0;
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 017E     columns = PINC & 0x07;
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 017F     if(columns != 0x07)
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0180     {
; 0000 0181     switch(columns)
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
; 0000 0182         {
; 0000 0183         case 0b110 : key_code = 4; break;
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 0184         case 0b101 : key_code = 5; break;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 0185         case 0b011 : key_code = 6; break;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
; 0000 0186         }
;PCODE: $00000261 VOL: 0
; 0000 0187     }
; 0000 0188     PORTC.5 = 1;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 0189 
; 0000 018A     // Third Row
; 0000 018B     PORTC.6 = 0;
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 018C     columns = PINC & 0x07;
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 018D     if(columns != 0x07)
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 018E     {
; 0000 018F     switch(columns)
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
; 0000 0190         {
; 0000 0191         case 0b110 : key_code = 7; break;
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0192         case 0b101 : key_code = 8; break;
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0193         case 0b011 : key_code = 9; break;
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 0194         }
;PCODE: $00000280 VOL: 0
; 0000 0195     }
; 0000 0196     PORTC.6 = 1;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 0197 
; 0000 0198     // Fourth Row
; 0000 0199     PORTC.7 = 0;
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 019A     if(!PINC.1) key_code = 0;
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 019B     PORTC.7 = 1;
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 019C 
; 0000 019D     PORTC = 0x0F;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 019E     return key_code;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 019F }
;PCODE: $00000293 VOL: 0
